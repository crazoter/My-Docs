(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{60:function(e,a,t){"use strict";t.r(a),t.d(a,"frontMatter",(function(){return b})),t.d(a,"metadata",(function(){return i})),t.d(a,"rightToc",(function(){return l})),t.d(a,"default",(function(){return p}));var n=t(2),r=t(6),c=(t(0),t(90)),b={title:"Formal Verification"},i={unversionedId:"markdown/formal_verification",id:"markdown/formal_verification",isDocsHomePage:!1,title:"Formal Verification",description:"DARWIN approach",source:"@site/docs/markdown/formal_verification.md",slug:"/markdown/formal_verification",permalink:"/My-Docs/docs/markdown/formal_verification",editUrl:"https://github.com/crazoter/My-Docs/edit/master/website/docs/markdown/formal_verification.md",version:"current",sidebar:"someSidebar",previous:{title:"Network",permalink:"/My-Docs/docs/markdown/network"},next:{title:"Technologies you should know",permalink:"/My-Docs/docs/"}},l=[{value:"DARWIN approach",id:"darwin-approach",children:[]},{value:"Cause Clue Clauses",id:"cause-clue-clauses",children:[]},{value:"Error Invariants",id:"error-invariants",children:[]},{value:"Programs",id:"programs",children:[]},{value:"Test-driven repair",id:"test-driven-repair",children:[]}],s={rightToc:l};function p(e){var a=e.components,t=Object(r.a)(e,["components"]);return Object(c.b)("wrapper",Object(n.a)({},s,t,{components:a,mdxType:"MDXLayout"}),Object(c.b)("h2",{id:"darwin-approach"},"DARWIN approach"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"For regression testing",Object(c.b)("ul",{parentName:"li"},Object(c.b)("li",{parentName:"ul"},"Given an old test input t that used to succeed but now fails")),Object(c.b)("ol",{parentName:"li"},Object(c.b)("li",{parentName:"ol"},"Set of inputs that once fulfilled the same path condition is now split"),Object(c.b)("li",{parentName:"ol"},"Compute the first path condition f")),Object(c.b)("ul",{parentName:"li"},Object(c.b)("li",{parentName:"ul"},'Path condition refers to all the "ANDs" in the conditions the path takes')),Object(c.b)("ol",Object(n.a)({parentName:"li"},{start:3}),Object(c.b)("li",{parentName:"ol"},"Compute the 2nd path condition f'"),Object(c.b)("li",{parentName:"ol"},"Solve for ",Object(c.b)("span",Object(n.a)({parentName:"li"},{className:"math math-inline"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"katex"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"katex-mathml"}),Object(c.b)("math",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/1998/Math/MathML"}),Object(c.b)("semantics",{parentName:"math"},Object(c.b)("mrow",{parentName:"semantics"},Object(c.b)("mi",{parentName:"mrow"},"f"),Object(c.b)("mo",{parentName:"mrow"},"\u2227"),Object(c.b)("mi",Object(n.a)({parentName:"mrow"},{mathvariant:"normal"}),"\xac"),Object(c.b)("msup",{parentName:"mrow"},Object(c.b)("mi",{parentName:"msup"},"f"),Object(c.b)("mo",Object(n.a)({parentName:"msup"},{mathvariant:"normal",lspace:"0em",rspace:"0em"}),"\u2032"))),Object(c.b)("annotation",Object(n.a)({parentName:"semantics"},{encoding:"application/x-tex"}),"f \\wedge \\neg f'")))),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"katex-html","aria-hidden":"true"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.8888799999999999em",verticalAlign:"-0.19444em"}})),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathnormal",style:{marginRight:"0.10764em"}}),"f"),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2222222222222222em"}})),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"mbin"}),"\u2227"),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2222222222222222em"}}))),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.946332em",verticalAlign:"-0.19444em"}})),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"mord"}),"\xac"),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"mord"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathnormal",style:{marginRight:"0.10764em"}}),"f"),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"msupsub"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"vlist-t"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"vlist-r"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"vlist",style:{height:"0.751892em"}}),Object(c.b)("span",Object(n.a)({parentName:"span"},{style:{top:"-3.063em",marginRight:"0.05em"}}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"pstrut",style:{height:"2.7em"}})),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"sizing reset-size6 size3 mtight"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"mord mtight"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"mord mtight"}),"\u2032")))))))))))))," (followed by old program but not followed by new program)",Object(c.b)("ol",{parentName:"li"},Object(c.b)("li",{parentName:"ol"},"If I say \"not of this path\" or neg f' then I can consider all the paths that deviate from f' (take another path at at any branch)"),Object(c.b)("li",{parentName:"ol"},"e.g. highlighting potential problem paths",Object(c.b)("ol",{parentName:"li"},Object(c.b)("li",{parentName:"ol"},"f = con1"),Object(c.b)("li",{parentName:"ol"},"f' = con1 n con4 n con5"),Object(c.b)("li",{parentName:"ol"},"f n -f' = iterate through all possibilities",Object(c.b)("ol",{parentName:"li"},Object(c.b)("li",{parentName:"ol"},"con1 n -con1 (not satisfiable)"),Object(c.b)("li",{parentName:"ol"},"con1 n -con4 (satisfiable, check this branch)"),Object(c.b)("li",{parentName:"ol"},"...etc"))))))),Object(c.b)("li",{parentName:"ol"},"Create a new input that fulfils the path condition for ",Object(c.b)("span",Object(n.a)({parentName:"li"},{className:"math math-inline"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"katex"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"katex-mathml"}),Object(c.b)("math",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/1998/Math/MathML"}),Object(c.b)("semantics",{parentName:"math"},Object(c.b)("mrow",{parentName:"semantics"},Object(c.b)("mi",{parentName:"mrow"},"f"),Object(c.b)("mo",{parentName:"mrow"},"\u2227"),Object(c.b)("mi",Object(n.a)({parentName:"mrow"},{mathvariant:"normal"}),"\xac"),Object(c.b)("msup",{parentName:"mrow"},Object(c.b)("mi",{parentName:"msup"},"f"),Object(c.b)("mo",Object(n.a)({parentName:"msup"},{mathvariant:"normal",lspace:"0em",rspace:"0em"}),"\u2032"))),Object(c.b)("annotation",Object(n.a)({parentName:"semantics"},{encoding:"application/x-tex"}),"f \\wedge \\neg f'")))),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"katex-html","aria-hidden":"true"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.8888799999999999em",verticalAlign:"-0.19444em"}})),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathnormal",style:{marginRight:"0.10764em"}}),"f"),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2222222222222222em"}})),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"mbin"}),"\u2227"),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2222222222222222em"}}))),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.946332em",verticalAlign:"-0.19444em"}})),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"mord"}),"\xac"),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"mord"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathnormal",style:{marginRight:"0.10764em"}}),"f"),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"msupsub"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"vlist-t"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"vlist-r"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"vlist",style:{height:"0.751892em"}}),Object(c.b)("span",Object(n.a)({parentName:"span"},{style:{top:"-3.063em",marginRight:"0.05em"}}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"pstrut",style:{height:"2.7em"}})),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"sizing reset-size6 size3 mtight"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"mord mtight"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"mord mtight"}),"\u2032")))))))))))))),Object(c.b)("li",{parentName:"ol"},"Compare the path followed at step 5 and the path taken by the buggy program to get diagnostics")))),Object(c.b)("h2",{id:"cause-clue-clauses"},"Cause Clue Clauses"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"Convert entire failing test trace into a SAT problem",Object(c.b)("ul",{parentName:"li"},Object(c.b)("li",{parentName:"ul"},"Since it's failing, it's unsatisfiable"),Object(c.b)("li",{parentName:"ul"},"Use MAXSAT solver to find the smallest set of constraints that can be removed to make it satisfiable",Object(c.b)("ul",{parentName:"li"},Object(c.b)("li",{parentName:"ul"},"Also specify some hard constraints: constraints that cannot be removed "),Object(c.b)("li",{parentName:"ul"},"In doing so, find the error causing the SAT to fail")))))),Object(c.b)("h2",{id:"error-invariants"},"Error Invariants"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"What must always be unsatisified (i.e. never clause)")),Object(c.b)("h2",{id:"programs"},"Programs"),Object(c.b)("ol",null,Object(c.b)("li",{parentName:"ol"},"I am interested in seeing how formal verification can be applied to practical use. Of course I can write my own model in promela, then specify my rules and then model check based on that. But I am curious: is there a way to automatically generate a model from my code?")),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("p",{parentName:"li"},"Are there tools in place that will automatically perform the tasks described in class?")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("p",{parentName:"li"},"What are the tools I can use to formally verify a model?"),Object(c.b)("ul",{parentName:"li"},Object(c.b)("li",{parentName:"ul"},"Promela:",Object(c.b)("ul",{parentName:"li"},Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",Object(n.a)({parentName:"li"},{href:"https://github.com/nimble-code/Spin"}),"SPIN, obviously")))))),Object(c.b)("li",{parentName:"ul"},Object(c.b)("p",{parentName:"li"},"Given a program in a given language:"),Object(c.b)("ul",{parentName:"li"},Object(c.b)("li",{parentName:"ul"},"What are the tools I can use to automatically generate a model (of my program)?",Object(c.b)("ul",{parentName:"li"},Object(c.b)("li",{parentName:"ul"},"Text",Object(c.b)("ul",{parentName:"li"},Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",Object(n.a)({parentName:"li"},{href:"http://fsmgenerator.sourceforge.net/"}),"FSMGenerator"),Object(c.b)("ul",{parentName:"li"},Object(c.b)("li",{parentName:"ul"},"Last Updated: 2008"))),Object(c.b)("li",{parentName:"ul"}))))),Object(c.b)("li",{parentName:"ul"},"What are the tools I can use to automatically generate test cases for it?",Object(c.b)("ul",{parentName:"li"},Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",Object(n.a)({parentName:"li"},{href:"http://www.cs.ru.nl/~lf/publications/BFS05.pdf"}),"http://www.cs.ru.nl/~lf/publications/BFS05.pdf")),Object(c.b)("li",{parentName:"ul"},"C",Object(c.b)("ul",{parentName:"li"},Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",Object(n.a)({parentName:"li"},{href:"https://www.cprover.org/cbmc/"}),"CBMC"),Object(c.b)("ul",{parentName:"li"},Object(c.b)("li",{parentName:"ul"},"Properties verified using assertions. See ",Object(c.b)("a",Object(n.a)({parentName:"li"},{href:"http://www.cprover.org/cprover-manual/properties/"}),"here")),Object(c.b)("li",{parentName:"ul"},"CMBC can also be used to convert a C program into a SAT formula. See ",Object(c.b)("a",Object(n.a)({parentName:"li"},{href:"https://cs.stackexchange.com/questions/99685/is-there-a-way-to-convert-a-program-into-a-boolean-formula"}),"https://cs.stackexchange.com/questions/99685/is-there-a-way-to-convert-a-program-into-a-boolean-formula")))))),Object(c.b)("li",{parentName:"ul"},"Java",Object(c.b)("ul",{parentName:"li"},Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",Object(n.a)({parentName:"li"},{href:"http://www.cprover.org/jbmc/"}),"JBMC"),", ",Object(c.b)("a",Object(n.a)({parentName:"li"},{href:"https://github.com/diffblue/cbmc"}),"GitHub"),Object(c.b)("ul",{parentName:"li"},Object(c.b)("li",{parentName:"ul"},"Properties verified using assertions. See ",Object(c.b)("a",Object(n.a)({parentName:"li"},{href:"http://www.cprover.org/cprover-manual/properties/"}),"here")))))),Object(c.b)("li",{parentName:"ul"},"Given a FSM model, generate test cases",Object(c.b)("ul",{parentName:"li"},Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",Object(n.a)({parentName:"li"},{href:"https://www.scielo.br/scielo.php?script=sci_arttext&pid=S2175-91462014000400447"}),"JPlavisFSM")))))),Object(c.b)("li",{parentName:"ul"},"What are the tools I can use to convert it (or portions of it) into a SAT formula (which can then be solved by a SAT solver if necessary)?"),Object(c.b)("li",{parentName:"ul"},"What are the tools I can use to automatically find errors in my program?",Object(c.b)("ul",{parentName:"li"},Object(c.b)("li",{parentName:"ul"},"LLVM",Object(c.b)("ul",{parentName:"li"},Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",Object(n.a)({parentName:"li"},{href:"https://github.com/staticafi/symbiotic"}),"Symbiotic (Dynamic Program Slicing)")," "),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",Object(n.a)({parentName:"li"},{href:"https://github.com/liuml07/giri"}),"Giri (Dynamic Program Slicing)"),", last updated 2018?"))),Object(c.b)("li",{parentName:"ul"},"Java",Object(c.b)("ul",{parentName:"li"},Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",Object(n.a)({parentName:"li"},{href:"https://github.com/backes/javaslicer"}),"JavaSlicer (limited dynamic program slicing)")))),Object(c.b)("li",{parentName:"ul"},"C",Object(c.b)("ul",{parentName:"li"},Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",Object(n.a)({parentName:"li"},{href:"http://people.eecs.berkeley.edu/~daw/mops/"}),"MOPS"),Object(c.b)("ul",{parentName:"li"},Object(c.b)("li",{parentName:"ul"},"Java executable for C programs"),Object(c.b)("li",{parentName:"ul"},"Last Updated: 2002"),Object(c.b)("li",{parentName:"ul"},"Descript: MOPS is a tool for finding security bugs in C programs and for verifying conformance to rules of defensive programming."),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",Object(n.a)({parentName:"li"},{href:"http://people.eecs.berkeley.edu/~daw/papers/mops-ccs02.pdf"}),"Paper"),Object(c.b)("ul",{parentName:"li"},Object(c.b)("li",{parentName:"ul"},"See also: ",Object(c.b)("a",Object(n.a)({parentName:"li"},{href:"https://people.eecs.berkeley.edu/~daw/papers/mops-ndss04.ps"}),"https://people.eecs.berkeley.edu/~daw/papers/mops-ndss04.ps")))),Object(c.b)("li",{parentName:"ul"},'Usage: User defines a Finite State Automaton (FSA), or a product of multiple FSAs which they call "meta-FSA", in text file(s).'))))))))),Object(c.b)("li",{parentName:"ul"},Object(c.b)("p",{parentName:"li"},"Other tools: ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"https://spinroot.com/static/"}),"https://spinroot.com/static/"))),Object(c.b)("li",{parentName:"ul"},Object(c.b)("p",{parentName:"li"},Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"https://en.wikipedia.org/wiki/List_of_tools_for_static_code_analysis#Python"}),"https://en.wikipedia.org/wiki/List_of_tools_for_static_code_analysis#Python")))),Object(c.b)("p",null,"defect detection\nstatistical fault localizer e.g. Tarantula\nDynamic Slicing JSlice (not used so often anymore)\nNCDC coverage\nTrace comparison & delta debugging"),Object(c.b)("h2",{id:"test-driven-repair"},"Test-driven repair"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"as long as I do my job you don't care",Object(c.b)("ul",{parentName:"li"},Object(c.b)("li",{parentName:"ul"},"Given a test suite T and buggy program P",Object(c.b)("ul",{parentName:"li"},Object(c.b)("li",{parentName:"ul"},"Find P' s.t.",Object(c.b)("ul",{parentName:"li"},Object(c.b)("li",{parentName:"ul"},"Passes T"),Object(c.b)("li",{parentName:"ul"},"Is syntactically closest to P"))))))),Object(c.b)("li",{parentName:"ul"},"One way: genetic programming",Object(c.b)("ul",{parentName:"li"},Object(c.b)("li",{parentName:"ul"},"SAP fix by facebook"),Object(c.b)("li",{parentName:"ul"},"Look for mutations of the program",Object(c.b)("ul",{parentName:"li"},Object(c.b)("li",{parentName:"ul"},"Look for the mutations that are effective"))))),Object(c.b)("li",{parentName:"ul"},"Search-based repair"),Object(c.b)("li",{parentName:"ul"},"Semantic program repair",Object(c.b)("ul",{parentName:"li"},Object(c.b)("li",{parentName:"ul"},"Use synthesizers"),Object(c.b)("li",{parentName:"ul"},"infer conditions from test suite")))))}p.isMDXComponent=!0},90:function(e,a,t){"use strict";t.d(a,"a",(function(){return m})),t.d(a,"b",(function(){return j}));var n=t(0),r=t.n(n);function c(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function b(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?b(Object(t),!0).forEach((function(a){c(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):b(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function l(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},c=Object.keys(e);for(n=0;n<c.length;n++)t=c[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(n=0;n<c.length;n++)t=c[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=r.a.createContext({}),p=function(e){var a=r.a.useContext(s),t=a;return e&&(t="function"==typeof e?e(a):i(i({},a),e)),t},m=function(e){var a=p(e.components);return r.a.createElement(s.Provider,{value:a},e.children)},o={inlineCode:"code",wrapper:function(e){var a=e.children;return r.a.createElement(r.a.Fragment,{},a)}},O=r.a.forwardRef((function(e,a){var t=e.components,n=e.mdxType,c=e.originalType,b=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),m=p(t),O=n,j=m["".concat(b,".").concat(O)]||m[O]||o[O]||c;return t?r.a.createElement(j,i(i({ref:a},s),{},{components:t})):r.a.createElement(j,i({ref:a},s))}));function j(e,a){var t=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var c=t.length,b=new Array(c);b[0]=O;var i={};for(var l in a)hasOwnProperty.call(a,l)&&(i[l]=a[l]);i.originalType=e,i.mdxType="string"==typeof e?e:n,b[1]=i;for(var s=2;s<c;s++)b[s]=t[s];return r.a.createElement.apply(null,b)}return r.a.createElement.apply(null,t)}O.displayName="MDXCreateElement"}}]);