"use strict";(self.webpackChunkmy_docs=self.webpackChunkmy_docs||[]).push([[1179],{3905:function(a,e,t){t.d(e,{Zo:function(){return o},kt:function(){return h}});var n=t(7294);function s(a,e,t){return e in a?Object.defineProperty(a,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):a[e]=t,a}function m(a,e){var t=Object.keys(a);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(a);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(a,e).enumerable}))),t.push.apply(t,n)}return t}function r(a){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?m(Object(t),!0).forEach((function(e){s(a,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(a,Object.getOwnPropertyDescriptors(t)):m(Object(t)).forEach((function(e){Object.defineProperty(a,e,Object.getOwnPropertyDescriptor(t,e))}))}return a}function p(a,e){if(null==a)return{};var t,n,s=function(a,e){if(null==a)return{};var t,n,s={},m=Object.keys(a);for(n=0;n<m.length;n++)t=m[n],e.indexOf(t)>=0||(s[t]=a[t]);return s}(a,e);if(Object.getOwnPropertySymbols){var m=Object.getOwnPropertySymbols(a);for(n=0;n<m.length;n++)t=m[n],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(a,t)&&(s[t]=a[t])}return s}var i=n.createContext({}),l=function(a){var e=n.useContext(i),t=e;return a&&(t="function"==typeof a?a(e):r(r({},e),a)),t},o=function(a){var e=l(a.components);return n.createElement(i.Provider,{value:e},a.children)},N="mdxType",k={inlineCode:"code",wrapper:function(a){var e=a.children;return n.createElement(n.Fragment,{},e)}},c=n.forwardRef((function(a,e){var t=a.components,s=a.mdxType,m=a.originalType,i=a.parentName,o=p(a,["components","mdxType","originalType","parentName"]),N=l(t),c=s,h=N["".concat(i,".").concat(c)]||N[c]||k[c]||m;return t?n.createElement(h,r(r({ref:e},o),{},{components:t})):n.createElement(h,r({ref:e},o))}));function h(a,e){var t=arguments,s=e&&e.mdxType;if("string"==typeof a||s){var m=t.length,r=new Array(m);r[0]=c;var p={};for(var i in e)hasOwnProperty.call(e,i)&&(p[i]=e[i]);p.originalType=a,p[N]="string"==typeof a?a:s,r[1]=p;for(var l=2;l<m;l++)r[l]=t[l];return n.createElement.apply(null,r)}return n.createElement.apply(null,t)}c.displayName="MDXCreateElement"},6031:function(a,e,t){t.r(e),t.d(e,{assets:function(){return o},contentTitle:function(){return i},default:function(){return h},frontMatter:function(){return p},metadata:function(){return l},toc:function(){return N}});var n=t(7462),s=t(3366),m=(t(7294),t(3905)),r=["components"],p={title:"Tips & Tricks"},i=void 0,l={unversionedId:"markdown/algorithms",id:"markdown/algorithms",title:"Tips & Tricks",description:"Sorting",source:"@site/docs/markdown/algorithms.md",sourceDirName:"markdown",slug:"/markdown/algorithms",permalink:"/My-Docs/docs/markdown/algorithms",draft:!1,editUrl:"https://github.com/crazoter/My-Docs/edit/main/docs/markdown/algorithms.md",tags:[],version:"current",frontMatter:{title:"Tips & Tricks"},sidebar:"someSidebar",previous:{title:"CS4226 Cheatsheet",permalink:"/My-Docs/docs/markdown/CS4226_summary"},next:{title:"Formal Verification",permalink:"/My-Docs/docs/markdown/formal_verification"}},o={},N=[{value:"Sorting",id:"sorting",level:2},{value:"Array Traversal",id:"array-traversal",level:2},{value:"Unsorted",id:"unsorted",level:3},{value:"Find kth rank item",id:"find-kth-rank-item",level:4},{value:"T:O(lg n), S:O(1): Quickselect",id:"tolg-n-so1-quickselect",level:5},{value:"Find element repeated more than n/2 times",id:"find-element-repeated-more-than-n2-times",level:4},{value:"T:O(n), S:O(1): Counter + Number",id:"ton-so1-counter--number",level:5},{value:"Maximum subarray Problem",id:"maximum-subarray-problem",level:4},{value:"T:O(n), S:O(1): Current &amp; Max Sum",id:"ton-so1-current--max-sum",level:5},{value:"Find min / max item",id:"find-min--max-item",level:4},{value:"T:O(n), S:O(1): Linear search",id:"ton-so1-linear-search",level:5},{value:"Sorted",id:"sorted",level:3},{value:"Find kth rank item",id:"find-kth-rank-item-1",level:4},{value:"T:O(1), S:O(1): Lookup",id:"to1-so1-lookup",level:5},{value:"Misc",id:"misc",level:3},{value:"Find k shifts (to the right) of sorted array",id:"find-k-shifts-to-the-right-of-sorted-array",level:4},{value:"T:O(nlgn), S:O(1): Find 1st inversion with mergesort",id:"tonlgn-so1-find-1st-inversion-with-mergesort",level:5},{value:"T:O(lgn), S:O(1): Find 1st inversion with binary search (Untested)",id:"tolgn-so1-find-1st-inversion-with-binary-search-untested",level:5},{value:"Directed Graph / Linked List",id:"directed-graph--linked-list",level:2},{value:"Find Cycle (&amp; start node)",id:"find-cycle--start-node",level:3},{value:"T:O(n), S:O(1): p=-&gt;next, q=-&gt;-&gt;next",id:"ton-so1-p-next-q--next",level:4},{value:"T:O(n), S:O(n): Hashset",id:"ton-son-hashset",level:4},{value:"Get Cycle size",id:"get-cycle-size",level:3},{value:"T:O(n), S:O(1): Find pt in loop, use 2nd ptr to iterate",id:"ton-so1-find-pt-in-loop-use-2nd-ptr-to-iterate",level:4},{value:"MakeSet(x)",id:"makesetx",level:4},{value:"Find(x) (with path reduction)",id:"findx-with-path-reduction",level:4},{value:"Union(x, y)",id:"unionx-y",level:4},{value:"Divide &amp; Conquer",id:"divide--conquer",level:2},{value:"Closest Pair of Euclidean Points",id:"closest-pair-of-euclidean-points",level:3},{value:"Counting Sort",id:"counting-sort",level:3},{value:"Radix Sort",id:"radix-sort",level:3},{value:"Bucket Sort",id:"bucket-sort",level:3},{value:"Testing",id:"testing",level:2},{value:"JUnit",id:"junit",level:3},{value:"BDD with Cucumber",id:"bdd-with-cucumber",level:3},{value:"GUI Testing",id:"gui-testing",level:3},{value:"Datastructures",id:"datastructures",level:2},{value:"Trie",id:"trie",level:3},{value:"Divide and Conquer",id:"divide-and-conquer",level:2},{value:"When to use Dynamic Programming",id:"when-to-use-dynamic-programming",level:2},{value:"Greedy Algorithms",id:"greedy-algorithms",level:2}],k={toc:N},c="wrapper";function h(a){var e=a.components,t=(0,s.Z)(a,r);return(0,m.kt)(c,(0,n.Z)({},k,t,{components:e,mdxType:"MDXLayout"}),(0,m.kt)("h2",{id:"sorting"},"Sorting"),(0,m.kt)("h2",{id:"array-traversal"},"Array Traversal"),(0,m.kt)("h3",{id:"unsorted"},"Unsorted"),(0,m.kt)("h4",{id:"find-kth-rank-item"},"Find kth rank item"),(0,m.kt)("h5",{id:"tolg-n-so1-quickselect"},"T:O(lg n), S:O(1): Quickselect"),(0,m.kt)("h4",{id:"find-element-repeated-more-than-n2-times"},"Find element repeated more than n/2 times"),(0,m.kt)("h5",{id:"ton-so1-counter--number"},"T:O(n), S:O(1): Counter + Number"),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre"},"int ctr, num = 0;\nfori A[]:\n  if ctr == 0:\n    num = A[i];\n  if num == A[i]: ctr++;\n  else: ctr--;\nreturn num;\n// src: https://stackoverflow.com/questions/7059780/find-the-element-repeated-more-than-n-2-times\n")),(0,m.kt)("h4",{id:"maximum-subarray-problem"},"Maximum subarray Problem"),(0,m.kt)("h5",{id:"ton-so1-current--max-sum"},"T:O(n), S:O(1): Current & Max Sum"),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre"},"// Kadane's algorithm\n// Modify w/ if statements to record subarray A[a, b]\nint best_sum = 0, curr_sum = 0;\nfori A[]:\n  curr_sum = max(0, curr_sum + A[i]);\n  best_sum = max(best_sum, curr_sum);\nreturn best_sum;\n// src: https://en.wikipedia.org/wiki/Maximum_subarray_problem\n")),(0,m.kt)("h4",{id:"find-min--max-item"},"Find min / max item"),(0,m.kt)("h5",{id:"ton-so1-linear-search"},"T:O(n), S:O(1): Linear search"),(0,m.kt)("h3",{id:"sorted"},"Sorted"),(0,m.kt)("h4",{id:"find-kth-rank-item-1"},"Find kth rank item"),(0,m.kt)("h5",{id:"to1-so1-lookup"},"T:O(1), S:O(1): Lookup"),(0,m.kt)("h3",{id:"misc"},"Misc"),(0,m.kt)("h4",{id:"find-k-shifts-to-the-right-of-sorted-array"},"Find k shifts (to the right) of sorted array"),(0,m.kt)("h5",{id:"tonlgn-so1-find-1st-inversion-with-mergesort"},"T:O(nlgn), S:O(1): Find 1st inversion with mergesort"),(0,m.kt)("h5",{id:"tolgn-so1-find-1st-inversion-with-binary-search-untested"},"T:O(lgn), S:O(1): Find 1st inversion with binary search (Untested)"),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre"},"int L = 0, R = A.len - 1, k = 0;\nwhile (R >= L): // While Search space > 0\n  int mid = (R - L) / 2;\n  if (A[mid] < A[0]):\n    if (mid < k): \n      k = mid;\n    R = mid - 1; // Trim Right if mid val \n  else:\n    L = mid + 1; // Trim Left \nreturn k;\n")),(0,m.kt)("h2",{id:"directed-graph--linked-list"},"Directed Graph / Linked List"),(0,m.kt)("h3",{id:"find-cycle--start-node"},"Find Cycle (& start node)"),(0,m.kt)("h4",{id:"ton-so1-p-next-q--next"},"T:O(n), S:O(1): p=->next, q=->->next"),(0,m.kt)("p",null,"Ptrs p, q. Start at head. p=->next, q=->next->next. Loop found when p=q, end when q=null (Floyd's Tortoise & Hare)."),(0,m.kt)("p",null,"Find start node: q = head. p=->next, q=->next. end when p=q. "),(0,m.kt)("h4",{id:"ton-son-hashset"},"T:O(n), S:O(n): Hashset"),(0,m.kt)("p",null,"Check collision. Start node = collision."),(0,m.kt)("h3",{id:"get-cycle-size"},"Get Cycle size"),(0,m.kt)("h4",{id:"ton-so1-find-pt-in-loop-use-2nd-ptr-to-iterate"},"T:O(n), S:O(1): Find pt in loop, use 2nd ptr to iterate"),(0,m.kt)("p",null,"Ptrs p, q. Find point in loop (See loop detection). q=->next, ctr++, stop if p=q."),(0,m.kt)("p",null,"== Union Find Disjoint Set (Amortized O(",(0,m.kt)("span",{parentName:"p",className:"math math-inline"},(0,m.kt)("span",{parentName:"span",className:"katex"},(0,m.kt)("span",{parentName:"span",className:"katex-mathml"},(0,m.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,m.kt)("semantics",{parentName:"math"},(0,m.kt)("mrow",{parentName:"semantics"},(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},"["),(0,m.kt)("mi",{parentName:"mrow"},"\u03b1"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},"]"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,m.kt)("mi",{parentName:"mrow"},"n"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},")"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},")"),(0,m.kt)("mtext",{parentName:"mrow"},"\xa0"),(0,m.kt)("mo",{parentName:"mrow"},"="),(0,m.kt)("mi",{parentName:"mrow"},"O"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,m.kt)("mn",{parentName:"mrow"},"1"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,m.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"[\\alpha](n)) ~= O(1)")))),(0,m.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,m.kt)("span",{parentName:"span",className:"mopen"},"["),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.0037em"}},"\u03b1"),(0,m.kt)("span",{parentName:"span",className:"mclose"},"]"),(0,m.kt)("span",{parentName:"span",className:"mopen"},"("),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,m.kt)("span",{parentName:"span",className:"mclose"},")"),(0,m.kt)("span",{parentName:"span",className:"mclose"},")"),(0,m.kt)("span",{parentName:"span",className:"mspace nobreak"},"\xa0"),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}}),(0,m.kt)("span",{parentName:"span",className:"mrel"},"="),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}})),(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,m.kt)("span",{parentName:"span",className:"mopen"},"("),(0,m.kt)("span",{parentName:"span",className:"mord"},"1"),(0,m.kt)("span",{parentName:"span",className:"mclose"},")"))))),")"),(0,m.kt)("h4",{id:"makesetx"},"MakeSet(x)"),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre"},"if x is not present:\n  add x to the tree\n  x.parent <- x\n  x.rank <- 0 // rank refers to height\n  x.size <- 1\n")),(0,m.kt)("h4",{id:"findx-with-path-reduction"},"Find(x) (with path reduction)"),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre"},"// 3 Options:\n// Path Compression (recurse path, make node point to its root)\n// Recall that if x.parent == x, x is the root. \nif x.parent != x: // If current node is not the root, recurse\n  x.parent <- find(x.parent)\nreturn x.parent\n\n// Path Halving (Make every even/odd node point to its grandparent)\nwhile x.parent != x:\n  x.parent <- x.parent.parent // parent is now grandparent\n  x <- x.parent // move to grandparent\nreturn x\n\n// Path Splitting (Make every node point to its grandparent)\nwhile x.parent != x:\n  next <- x.parent\n  x.parent <- next.parent\n  x <- next\nreturn x\n")),(0,m.kt)("h4",{id:"unionx-y"},"Union(x, y)"),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre"},"// By rank or size: Merge smaller subtree into larger subtree\nrootOfX <- find(x)\nrootOfY <- find(y)\nreturn if rootOfX == rootOfY\n\n// Ensure rootOfX is always of equal/higher rank\nelse if [rank:(rootOfX.rank < rootOfY.rank)] [size:(rootOfX.size < rootOfY.size)]\n  swap rootOfX and rootOfY\n\nrootOfY.parent <- rootOfX // Merge rootOfY into rootOfX\n[rank:\nif rootOfX.rank == rootOfY.rank // If they have the same rank, increment rank of root by 1\n  rootOfX.rank += 1\n]\n[size: rootOfX.size += rootOfY.size]\n")),(0,m.kt)("h2",{id:"divide--conquer"},"Divide & Conquer"),(0,m.kt)("h3",{id:"closest-pair-of-euclidean-points"},"Closest Pair of Euclidean Points"),(0,m.kt)("ol",null,(0,m.kt)("li",{parentName:"ol"},"Sort points by x-coordinate."),(0,m.kt)("li",{parentName:"ol"},"Split the points into two equal-sized subsets by median point."),(0,m.kt)("li",{parentName:"ol"},"Solve the two subsets recursively. This results in left-side and right-side minimum distances dLmin and dRmin."),(0,m.kt)("li",{parentName:"ol"},"Find the minimal distance dLRmin among the set of pairs of points in which one point lies on the left of the dividing vertical and the other point lies to the right.\n. Observation shows smallest distance, d, must be ",(0,m.kt)("span",{parentName:"li",className:"math math-inline"},(0,m.kt)("span",{parentName:"span",className:"katex"},(0,m.kt)("span",{parentName:"span",className:"katex-mathml"},(0,m.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,m.kt)("semantics",{parentName:"math"},(0,m.kt)("mrow",{parentName:"semantics"},(0,m.kt)("mo",{parentName:"mrow"},"\u2264")),(0,m.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\\leq")))),(0,m.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"0.7719400000000001em",verticalAlign:"-0.13597em"}}),(0,m.kt)("span",{parentName:"span",className:"mrel"},"\u2264")))))," min{dLMin, dRmin}.\n. for each point pLeft in the left subset, take points in the right subset, pRight, that lie in the rectangle of dimensions (d, 2 \u22c5 d) in the right subset and calculate dLRmin = min{dist(pLeft, pRight), d}"),(0,m.kt)("li",{parentName:"ol"},"Return min{dLmin, dRmin, dLRmin}.")),(0,m.kt)("p",null,"Working:"),(0,m.kt)("p",null,(0,m.kt)("span",{parentName:"p",className:"math math-inline"},(0,m.kt)("span",{parentName:"span",className:"katex"},(0,m.kt)("span",{parentName:"span",className:"katex-mathml"},(0,m.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,m.kt)("semantics",{parentName:"math"},(0,m.kt)("mrow",{parentName:"semantics"},(0,m.kt)("msub",{parentName:"mrow"},(0,m.kt)("mrow",{parentName:"msub"},(0,m.kt)("mi",{parentName:"mrow"},"d"),(0,m.kt)("mi",{parentName:"mrow"},"i"),(0,m.kt)("mi",{parentName:"mrow"},"s"),(0,m.kt)("mi",{parentName:"mrow"},"t"),(0,m.kt)("mi",{parentName:"mrow"},"a"),(0,m.kt)("mi",{parentName:"mrow"},"n"),(0,m.kt)("mi",{parentName:"mrow"},"c"),(0,m.kt)("mi",{parentName:"mrow"},"e")),(0,m.kt)("mrow",{parentName:"msub"},(0,m.kt)("mi",{parentName:"mrow"},"e"),(0,m.kt)("mi",{parentName:"mrow"},"g"),(0,m.kt)("mi",{parentName:"mrow"},"g"),(0,m.kt)("mi",{parentName:"mrow"},"s"))),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,m.kt)("mi",{parentName:"mrow"},"t"),(0,m.kt)("mi",{parentName:"mrow"},"r"),(0,m.kt)("mi",{parentName:"mrow"},"i"),(0,m.kt)("mi",{parentName:"mrow"},"a"),(0,m.kt)("mi",{parentName:"mrow"},"l"),(0,m.kt)("mi",{parentName:"mrow"},"s"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,m.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"{distance}_{eggs}(trials)")))),(0,m.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"1.036108em",verticalAlign:"-0.286108em"}}),(0,m.kt)("span",{parentName:"span",className:"mord"},(0,m.kt)("span",{parentName:"span",className:"mord"},(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"d"),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"i"),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"s"),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"t"),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"a"),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"c"),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"e")),(0,m.kt)("span",{parentName:"span",className:"msupsub"},(0,m.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,m.kt)("span",{parentName:"span",className:"vlist-r"},(0,m.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15139200000000003em"}},(0,m.kt)("span",{parentName:"span",style:{top:"-2.5500000000000003em",marginRight:"0.05em"}},(0,m.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,m.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,m.kt)("span",{parentName:"span",className:"mord mtight"},(0,m.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"e"),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal mtight",style:{marginRight:"0.03588em"}},"g"),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal mtight",style:{marginRight:"0.03588em"}},"g"),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"s"))))),(0,m.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,m.kt)("span",{parentName:"span",className:"vlist-r"},(0,m.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.286108em"}},(0,m.kt)("span",{parentName:"span"})))))),(0,m.kt)("span",{parentName:"span",className:"mopen"},"("),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"t"),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"r"),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"i"),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"a"),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.01968em"}},"l"),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"s"),(0,m.kt)("span",{parentName:"span",className:"mclose"},")")))))),(0,m.kt)("p",null,(0,m.kt)("span",{parentName:"p",className:"math math-inline"},(0,m.kt)("span",{parentName:"span",className:"katex"},(0,m.kt)("span",{parentName:"span",className:"katex-mathml"},(0,m.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,m.kt)("semantics",{parentName:"math"},(0,m.kt)("mrow",{parentName:"semantics"},(0,m.kt)("mi",{parentName:"mrow"},"t"),(0,m.kt)("mo",{parentName:"mrow"},"\u2265"),(0,m.kt)("mn",{parentName:"mrow"},"2"),(0,m.kt)("mo",{parentName:"mrow"},":"),(0,m.kt)("msub",{parentName:"mrow"},(0,m.kt)("mi",{parentName:"msub"},"d"),(0,m.kt)("mi",{parentName:"msub"},"n")),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,m.kt)("mi",{parentName:"mrow"},"t"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},")"),(0,m.kt)("mo",{parentName:"mrow"},"="),(0,m.kt)("mn",{parentName:"mrow"},"1"),(0,m.kt)("mo",{parentName:"mrow"},"+"),(0,m.kt)("msub",{parentName:"mrow"},(0,m.kt)("mi",{parentName:"msub"},"d"),(0,m.kt)("mrow",{parentName:"msub"},(0,m.kt)("mi",{parentName:"mrow"},"n"),(0,m.kt)("mo",{parentName:"mrow"},"\u2212"),(0,m.kt)("mn",{parentName:"mrow"},"1"))),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,m.kt)("mi",{parentName:"mrow"},"t"),(0,m.kt)("mo",{parentName:"mrow"},"\u2212"),(0,m.kt)("mn",{parentName:"mrow"},"1"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},")"),(0,m.kt)("mo",{parentName:"mrow"},"+"),(0,m.kt)("msub",{parentName:"mrow"},(0,m.kt)("mi",{parentName:"msub"},"d"),(0,m.kt)("mi",{parentName:"msub"},"n")),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,m.kt)("mi",{parentName:"mrow"},"t"),(0,m.kt)("mo",{parentName:"mrow"},"\u2212"),(0,m.kt)("mn",{parentName:"mrow"},"1"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,m.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"t\\geq 2: d_n(t) = 1 + d_{n-1}(t-1) + d_n(t-1)")))),(0,m.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"0.7719400000000001em",verticalAlign:"-0.13597em"}}),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"t"),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}}),(0,m.kt)("span",{parentName:"span",className:"mrel"},"\u2265"),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}})),(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"0.64444em",verticalAlign:"0em"}}),(0,m.kt)("span",{parentName:"span",className:"mord"},"2"),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}}),(0,m.kt)("span",{parentName:"span",className:"mrel"},":"),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}})),(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,m.kt)("span",{parentName:"span",className:"mord"},(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"d"),(0,m.kt)("span",{parentName:"span",className:"msupsub"},(0,m.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,m.kt)("span",{parentName:"span",className:"vlist-r"},(0,m.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.151392em"}},(0,m.kt)("span",{parentName:"span",style:{top:"-2.5500000000000003em",marginLeft:"0em",marginRight:"0.05em"}},(0,m.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,m.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,m.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"n")))),(0,m.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,m.kt)("span",{parentName:"span",className:"vlist-r"},(0,m.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,m.kt)("span",{parentName:"span"})))))),(0,m.kt)("span",{parentName:"span",className:"mopen"},"("),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"t"),(0,m.kt)("span",{parentName:"span",className:"mclose"},")"),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}}),(0,m.kt)("span",{parentName:"span",className:"mrel"},"="),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}})),(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"0.72777em",verticalAlign:"-0.08333em"}}),(0,m.kt)("span",{parentName:"span",className:"mord"},"1"),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}}),(0,m.kt)("span",{parentName:"span",className:"mbin"},"+"),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}})),(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,m.kt)("span",{parentName:"span",className:"mord"},(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"d"),(0,m.kt)("span",{parentName:"span",className:"msupsub"},(0,m.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,m.kt)("span",{parentName:"span",className:"vlist-r"},(0,m.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.301108em"}},(0,m.kt)("span",{parentName:"span",style:{top:"-2.5500000000000003em",marginLeft:"0em",marginRight:"0.05em"}},(0,m.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,m.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,m.kt)("span",{parentName:"span",className:"mord mtight"},(0,m.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"n"),(0,m.kt)("span",{parentName:"span",className:"mbin mtight"},"\u2212"),(0,m.kt)("span",{parentName:"span",className:"mord mtight"},"1"))))),(0,m.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,m.kt)("span",{parentName:"span",className:"vlist-r"},(0,m.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.208331em"}},(0,m.kt)("span",{parentName:"span"})))))),(0,m.kt)("span",{parentName:"span",className:"mopen"},"("),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"t"),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}}),(0,m.kt)("span",{parentName:"span",className:"mbin"},"\u2212"),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}})),(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,m.kt)("span",{parentName:"span",className:"mord"},"1"),(0,m.kt)("span",{parentName:"span",className:"mclose"},")"),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}}),(0,m.kt)("span",{parentName:"span",className:"mbin"},"+"),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}})),(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,m.kt)("span",{parentName:"span",className:"mord"},(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"d"),(0,m.kt)("span",{parentName:"span",className:"msupsub"},(0,m.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,m.kt)("span",{parentName:"span",className:"vlist-r"},(0,m.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.151392em"}},(0,m.kt)("span",{parentName:"span",style:{top:"-2.5500000000000003em",marginLeft:"0em",marginRight:"0.05em"}},(0,m.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,m.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,m.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"n")))),(0,m.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,m.kt)("span",{parentName:"span",className:"vlist-r"},(0,m.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,m.kt)("span",{parentName:"span"})))))),(0,m.kt)("span",{parentName:"span",className:"mopen"},"("),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"t"),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}}),(0,m.kt)("span",{parentName:"span",className:"mbin"},"\u2212"),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}})),(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,m.kt)("span",{parentName:"span",className:"mord"},"1"),(0,m.kt)("span",{parentName:"span",className:"mclose"},")")))))),(0,m.kt)("p",null,(0,m.kt)("span",{parentName:"p",className:"math math-inline"},(0,m.kt)("span",{parentName:"span",className:"katex"},(0,m.kt)("span",{parentName:"span",className:"katex-mathml"},(0,m.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,m.kt)("semantics",{parentName:"math"},(0,m.kt)("mrow",{parentName:"semantics"},(0,m.kt)("mi",{parentName:"mrow"},"t"),(0,m.kt)("mo",{parentName:"mrow"},"\u2265"),(0,m.kt)("mn",{parentName:"mrow"},"1"),(0,m.kt)("mo",{parentName:"mrow"},":"),(0,m.kt)("msub",{parentName:"mrow"},(0,m.kt)("mi",{parentName:"msub"},"d"),(0,m.kt)("mn",{parentName:"msub"},"1")),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,m.kt)("mi",{parentName:"mrow"},"t"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},")"),(0,m.kt)("mo",{parentName:"mrow"},"="),(0,m.kt)("mn",{parentName:"mrow"},"1")),(0,m.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"t\\geq 1: d_1(t) = 1")))),(0,m.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"0.7719400000000001em",verticalAlign:"-0.13597em"}}),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"t"),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}}),(0,m.kt)("span",{parentName:"span",className:"mrel"},"\u2265"),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}})),(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"0.64444em",verticalAlign:"0em"}}),(0,m.kt)("span",{parentName:"span",className:"mord"},"1"),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}}),(0,m.kt)("span",{parentName:"span",className:"mrel"},":"),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}})),(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,m.kt)("span",{parentName:"span",className:"mord"},(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"d"),(0,m.kt)("span",{parentName:"span",className:"msupsub"},(0,m.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,m.kt)("span",{parentName:"span",className:"vlist-r"},(0,m.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.30110799999999993em"}},(0,m.kt)("span",{parentName:"span",style:{top:"-2.5500000000000003em",marginLeft:"0em",marginRight:"0.05em"}},(0,m.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,m.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,m.kt)("span",{parentName:"span",className:"mord mtight"},"1")))),(0,m.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,m.kt)("span",{parentName:"span",className:"vlist-r"},(0,m.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,m.kt)("span",{parentName:"span"})))))),(0,m.kt)("span",{parentName:"span",className:"mopen"},"("),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"t"),(0,m.kt)("span",{parentName:"span",className:"mclose"},")"),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}}),(0,m.kt)("span",{parentName:"span",className:"mrel"},"="),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}})),(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"0.64444em",verticalAlign:"0em"}}),(0,m.kt)("span",{parentName:"span",className:"mord"},"1")))))),(0,m.kt)("p",null,(0,m.kt)("span",{parentName:"p",className:"math math-inline"},(0,m.kt)("span",{parentName:"span",className:"katex"},(0,m.kt)("span",{parentName:"span",className:"katex-mathml"},(0,m.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,m.kt)("semantics",{parentName:"math"},(0,m.kt)("mrow",{parentName:"semantics"},(0,m.kt)("mi",{parentName:"mrow"},"t"),(0,m.kt)("mo",{parentName:"mrow"},"\u2265"),(0,m.kt)("mn",{parentName:"mrow"},"1"),(0,m.kt)("mo",{parentName:"mrow"},":"),(0,m.kt)("msub",{parentName:"mrow"},(0,m.kt)("mi",{parentName:"msub"},"d"),(0,m.kt)("mn",{parentName:"msub"},"2")),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,m.kt)("mi",{parentName:"mrow"},"t"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},")"),(0,m.kt)("mo",{parentName:"mrow"},"="),(0,m.kt)("mi",{parentName:"mrow"},"t"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,m.kt)("mi",{parentName:"mrow"},"t"),(0,m.kt)("mo",{parentName:"mrow"},"+"),(0,m.kt)("mn",{parentName:"mrow"},"1"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},")"),(0,m.kt)("mi",{parentName:"mrow",mathvariant:"normal"},"/"),(0,m.kt)("mn",{parentName:"mrow"},"2")),(0,m.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"t\\geq 1: d_2(t) = t(t+1)/2")))),(0,m.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"0.7719400000000001em",verticalAlign:"-0.13597em"}}),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"t"),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}}),(0,m.kt)("span",{parentName:"span",className:"mrel"},"\u2265"),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}})),(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"0.64444em",verticalAlign:"0em"}}),(0,m.kt)("span",{parentName:"span",className:"mord"},"1"),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}}),(0,m.kt)("span",{parentName:"span",className:"mrel"},":"),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}})),(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,m.kt)("span",{parentName:"span",className:"mord"},(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"d"),(0,m.kt)("span",{parentName:"span",className:"msupsub"},(0,m.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,m.kt)("span",{parentName:"span",className:"vlist-r"},(0,m.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.30110799999999993em"}},(0,m.kt)("span",{parentName:"span",style:{top:"-2.5500000000000003em",marginLeft:"0em",marginRight:"0.05em"}},(0,m.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,m.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,m.kt)("span",{parentName:"span",className:"mord mtight"},"2")))),(0,m.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,m.kt)("span",{parentName:"span",className:"vlist-r"},(0,m.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,m.kt)("span",{parentName:"span"})))))),(0,m.kt)("span",{parentName:"span",className:"mopen"},"("),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"t"),(0,m.kt)("span",{parentName:"span",className:"mclose"},")"),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}}),(0,m.kt)("span",{parentName:"span",className:"mrel"},"="),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}})),(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"t"),(0,m.kt)("span",{parentName:"span",className:"mopen"},"("),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"t"),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}}),(0,m.kt)("span",{parentName:"span",className:"mbin"},"+"),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}})),(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,m.kt)("span",{parentName:"span",className:"mord"},"1"),(0,m.kt)("span",{parentName:"span",className:"mclose"},")"),(0,m.kt)("span",{parentName:"span",className:"mord"},"/"),(0,m.kt)("span",{parentName:"span",className:"mord"},"2")))))),(0,m.kt)("p",null,(0,m.kt)("span",{parentName:"p",className:"math math-inline"},(0,m.kt)("span",{parentName:"span",className:"katex"},(0,m.kt)("span",{parentName:"span",className:"katex-mathml"},(0,m.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,m.kt)("semantics",{parentName:"math"},(0,m.kt)("mrow",{parentName:"semantics"},(0,m.kt)("mi",{parentName:"mrow"},"t"),(0,m.kt)("mo",{parentName:"mrow"},"<"),(0,m.kt)("mi",{parentName:"mrow"},"n"),(0,m.kt)("mo",{parentName:"mrow"},":"),(0,m.kt)("msub",{parentName:"mrow"},(0,m.kt)("mi",{parentName:"msub"},"d"),(0,m.kt)("mi",{parentName:"msub"},"n")),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,m.kt)("mi",{parentName:"mrow"},"t"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},")"),(0,m.kt)("mo",{parentName:"mrow"},"="),(0,m.kt)("msub",{parentName:"mrow"},(0,m.kt)("mi",{parentName:"msub"},"d"),(0,m.kt)("mi",{parentName:"msub"},"t")),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,m.kt)("mi",{parentName:"mrow"},"t"),(0,m.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,m.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"t \\lt n: d_n(t) = d_t(t)")))),(0,m.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"0.65418em",verticalAlign:"-0.0391em"}}),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"t"),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}}),(0,m.kt)("span",{parentName:"span",className:"mrel"},"<"),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}})),(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"0.43056em",verticalAlign:"0em"}}),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}}),(0,m.kt)("span",{parentName:"span",className:"mrel"},":"),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}})),(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,m.kt)("span",{parentName:"span",className:"mord"},(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"d"),(0,m.kt)("span",{parentName:"span",className:"msupsub"},(0,m.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,m.kt)("span",{parentName:"span",className:"vlist-r"},(0,m.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.151392em"}},(0,m.kt)("span",{parentName:"span",style:{top:"-2.5500000000000003em",marginLeft:"0em",marginRight:"0.05em"}},(0,m.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,m.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,m.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"n")))),(0,m.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,m.kt)("span",{parentName:"span",className:"vlist-r"},(0,m.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,m.kt)("span",{parentName:"span"})))))),(0,m.kt)("span",{parentName:"span",className:"mopen"},"("),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"t"),(0,m.kt)("span",{parentName:"span",className:"mclose"},")"),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}}),(0,m.kt)("span",{parentName:"span",className:"mrel"},"="),(0,m.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}})),(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,m.kt)("span",{parentName:"span",className:"mord"},(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"d"),(0,m.kt)("span",{parentName:"span",className:"msupsub"},(0,m.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,m.kt)("span",{parentName:"span",className:"vlist-r"},(0,m.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.2805559999999999em"}},(0,m.kt)("span",{parentName:"span",style:{top:"-2.5500000000000003em",marginLeft:"0em",marginRight:"0.05em"}},(0,m.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,m.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,m.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"t")))),(0,m.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,m.kt)("span",{parentName:"span",className:"vlist-r"},(0,m.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,m.kt)("span",{parentName:"span"})))))),(0,m.kt)("span",{parentName:"span",className:"mopen"},"("),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal"},"t"),(0,m.kt)("span",{parentName:"span",className:"mclose"},")")))))),(0,m.kt)("p",null,"//\n// file: Algorithms.adoc\n//\n= Algorithms & Code (Java)\n:sectnums:\n:toc: left\n:toclevels: 3"),(0,m.kt)("p",null,":toc!:\n:stem: asciimath"),(0,m.kt)("p",null,"== Search\n=== Binary Search"),(0,m.kt)("ul",null,(0,m.kt)("li",{parentName:"ul"},"For sorted arrays"),(0,m.kt)("li",{parentName:"ul"},"O(lg(n))")),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre"},"// Refactored from: https://www.geeksforgeeks.org/binary-search/\n\npublic static int binsearch(int[] arr, int val) {\n    int left = 0, right = arr.length - 1, mid = 0;\n    while (right >= left) { \n        int mid = left + (right - left) / 2; \n        if (arr[mid] == val) {      return mid; }\n        else if (arr[mid] > val) {  right = mid - 1; }\n        else {                      left = mid + 1; }\n    } \n    return -1; \n}\n")),(0,m.kt)("p",null,"== Sorting\n=== Merge Sort"),(0,m.kt)("ul",null,(0,m.kt)("li",{parentName:"ul"},"Time & Space Complexity: O(nlog(n))"),(0,m.kt)("li",{parentName:"ul"},"Not in-place"),(0,m.kt)("li",{parentName:"ul"},"Stable"),(0,m.kt)("li",{parentName:"ul"},"Comparison based sorting algorithm"),(0,m.kt)("li",{parentName:"ul"},"Extra Notes:\n",(0,m.kt)("strong",{parentName:"li"}," Can be used to count inversions\n")," Example of divide & conquer")),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre"},"// Refactored from: https://www.geeksforgeeks.org/java-program-for-merge-sort/\n\npublic static void merge(int[] arr, int l, int m, int r) { \n    // Find sizes of two subarrays to be merged \n    int L_N = m - l + 1; \n    int R_N = r - m; \n\n    /* Create temp arrays */\n    int L[] = new int [L_N]; \n    int R[] = new int [R_N]; \n\n    /*Copy data to temp arrays*/\n    for (int i=0; i<L_N; ++i) L[i] = arr[l + i]; \n    for (int j=0; j<R_N; ++j) R[j] = arr[m + 1 + j]; \n\n    /* Merge the sorted sub-arrays */\n    int i = 0, j = 0; \n    int k = l;      // Index of current sub-arr\n    while (i < L_N && j < R_N) { \n        if (L[i] <= R[j])   { arr[k++] = L[i++]; } \n        else                { arr[k++] = R[j++]; } \n    } \n\n    /* Copy remaining elements of L[] and R[] if any */\n    while (i < n1) { arr[k++] = L[i++]; } \n    while (j < n2) { arr[k++] = R[j++]; } \n} \n\n// Usage: merge_sort(arr, 0, arr.length - 1);\npublic static void merge_sort(int arr[], int left, int right) { \n    if (left < right) { \n        int mid = (left + right) / 2; \n        merge_sort(arr, left, mid); \n        merge_sort(arr, mid + 1, right); \n        merge(arr, left, mid, right); \n    } \n} \n")),(0,m.kt)("p",null,"=== Heap Sort\n=== Quick Sort"),(0,m.kt)("pre",null,(0,m.kt)("code",{parentName:"pre"},"public static void swap(int arr[], int i, int j) {\n    int tmp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = tmp;\n}\n\npublic static int partition(int arr[], int l, int r, int pivot) { \n    int i = l; // index of smaller element \n    for (int j = l; j < r; ++j) { \n        if (arr[j] <= pivot) \n            swap(arr, i++, j); \n    } \n\n    // swap arr[i] with pivot at arr[r]\n    swap(arr, i, r);\n    return i;\n} \n\n// Usage: quickSort(arr, 0, arr.length - 1);\npublic static void quickSort(int arr[], int l, int r) { \n    if (l < r) { \n        // Swap random pivot to right\n        swap(arr, rand.nextInt(r - l) + l, r);\n        \n        // Get pivot index\n        int pivotIdx = partition(arr, l, r, arr[r]); \n        \n        // Recursively sort elements on left & right \n        quickSort(arr, l, pivotIdx - 1); \n        quickSort(arr, pivotIdx + 1, r); \n    } \n}\n")),(0,m.kt)("h3",{id:"counting-sort"},"Counting Sort"),(0,m.kt)("h3",{id:"radix-sort"},"Radix Sort"),(0,m.kt)("h3",{id:"bucket-sort"},"Bucket Sort"),(0,m.kt)("h2",{id:"testing"},"Testing"),(0,m.kt)("ol",null,(0,m.kt)("li",{parentName:"ol"},(0,m.kt)("strong",{parentName:"li"},"Identify the ",(0,m.kt)("em",{parentName:"strong"},"Equivalence Partitions (EP)"),":"),(0,m.kt)("ul",{parentName:"li"},(0,m.kt)("li",{parentName:"ul"},"EP: A group of test inputs that are likely to be processed by the SUT in the same way."))),(0,m.kt)("li",{parentName:"ol"},(0,m.kt)("strong",{parentName:"li"},"Use ",(0,m.kt)("em",{parentName:"strong"},"Boundary Value Analysis (BVA)"),":"),(0,m.kt)("ul",{parentName:"li"},(0,m.kt)("li",{parentName:"ul"},"When picking test inputs from an equivalence partition, values near boundaries (i.e. boundary values) are more likely to find bugs."),(0,m.kt)("li",{parentName:"ul"},(0,m.kt)("a",{parentName:"li",href:"https://nus-cs2103-ay2021s1.github.io/website/se-book-adapted/chapters/testCaseDesign.html#how"},"Examples")))),(0,m.kt)("li",{parentName:"ol"},(0,m.kt)("strong",{parentName:"li"},"Handling multiple parameters:"),(0,m.kt)("ul",{parentName:"li"},(0,m.kt)("li",{parentName:"ul"},"Each valid input at least once in a positive test case"),(0,m.kt)("li",{parentName:"ul"},"No more than one invalid input in a test case"))),(0,m.kt)("li",{parentName:"ol"},(0,m.kt)("strong",{parentName:"li"},"Edge cases to consider:"),(0,m.kt)("ul",{parentName:"li"},(0,m.kt)("li",{parentName:"ul"},"NULL / UNDEFINED"),(0,m.kt)("li",{parentName:"ul"},"Empty / Length = 0"),(0,m.kt)("li",{parentName:"ul"},"Negative values"),(0,m.kt)("li",{parentName:"ul"},"Larger than Integer / Int Overflow ",(0,m.kt)("ul",{parentName:"li"},(0,m.kt)("li",{parentName:"ul"},"(+-2,147,483,647, uint 4,294,967,295)")))))),(0,m.kt)("h3",{id:"junit"},"JUnit"),(0,m.kt)("ul",null,(0,m.kt)("li",{parentName:"ul"},(0,m.kt)("a",{parentName:"li",href:"https://www.vogella.com/tutorials/JUnit/article.html"},"https://www.vogella.com/tutorials/JUnit/article.html"))),(0,m.kt)("h3",{id:"bdd-with-cucumber"},"BDD with Cucumber"),(0,m.kt)("ul",null,(0,m.kt)("li",{parentName:"ul"},"Gherkin syntax: ",(0,m.kt)("a",{parentName:"li",href:"https://cucumber.io/docs/gherkin/reference/"},"https://cucumber.io/docs/gherkin/reference/")),(0,m.kt)("li",{parentName:"ul"},"Implementation example: ",(0,m.kt)("a",{parentName:"li",href:"https://www.testim.io/blog/cucumber-js-for-bdd-an-introductory-tutorial-with-examples/"},"https://www.testim.io/blog/cucumber-js-for-bdd-an-introductory-tutorial-with-examples/"))),(0,m.kt)("h3",{id:"gui-testing"},"GUI Testing"),(0,m.kt)("ul",null,(0,m.kt)("li",{parentName:"ul"},(0,m.kt)("a",{parentName:"li",href:"https://reqtest.com/testing-blog/gui-testing-tutorial/"},"https://reqtest.com/testing-blog/gui-testing-tutorial/"))),(0,m.kt)("h2",{id:"datastructures"},"Datastructures"),(0,m.kt)("h3",{id:"trie"},"Trie"),(0,m.kt)("ul",null,(0,m.kt)("li",{parentName:"ul"},(0,m.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Trie"},"https://en.wikipedia.org/wiki/Trie"))),(0,m.kt)("h2",{id:"divide-and-conquer"},"Divide and Conquer"),(0,m.kt)("ul",null,(0,m.kt)("li",{parentName:"ul"},"Recursively break down problem into two or more subproblems of the same type until they can be solved directly")),(0,m.kt)("h2",{id:"when-to-use-dynamic-programming"},"When to use Dynamic Programming"),(0,m.kt)("ul",null,(0,m.kt)("li",{parentName:"ul"},(0,m.kt)("strong",{parentName:"li"},"Optimal substructure"),": Problem can be solved recursively -> can be broken into smaller problems"),(0,m.kt)("li",{parentName:"ul"},(0,m.kt)("strong",{parentName:"li"},"Overlapping subproblems"),": Solutions to smaller problems can be cached to be re-used later"),(0,m.kt)("li",{parentName:"ul"},"Think of it as search space for an agent's actions (take item / ignore etc)"),(0,m.kt)("li",{parentName:"ul"},"Heuristics:",(0,m.kt)("ul",{parentName:"li"},(0,m.kt)("li",{parentName:"ul"},"Can be drawn out into a tree"),(0,m.kt)("li",{parentName:"ul"},"Is problem Maximization, Minimization or Counting?"),(0,m.kt)("li",{parentName:"ul"},"If problem can be solved by enumerating through all possible solutions and finding best one"),(0,m.kt)("li",{parentName:"ul"},"problem can be solved by enumerating through all subproblems and getting best subproblem solution")))),(0,m.kt)("h2",{id:"greedy-algorithms"},"Greedy Algorithms"),(0,m.kt)("ul",null,(0,m.kt)("li",{parentName:"ul"},"Always choose the best available option (e.g. Djkstra, Fractional Knapsack)"),(0,m.kt)("li",{parentName:"ul"},"Not always optimal, and proving it is optimal is difficult")))}h.isMDXComponent=!0}}]);