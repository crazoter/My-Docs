"use strict";(self.webpackChunkmy_docs=self.webpackChunkmy_docs||[]).push([[7949],{3905:function(e,t,a){a.d(t,{Zo:function(){return m},kt:function(){return c}});var n=a(7294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var p=n.createContext({}),s=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},m=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},k="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,l=e.originalType,p=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),k=s(a),d=i,c=k["".concat(p,".").concat(d)]||k[d]||u[d]||l;return a?n.createElement(c,r(r({ref:t},m),{},{components:a})):n.createElement(c,r({ref:t},m))}));function c(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=a.length,r=new Array(l);r[0]=d;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[k]="string"==typeof e?e:i,r[1]=o;for(var s=2;s<l;s++)r[s]=a[s];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},6262:function(e,t,a){a.r(t),a.d(t,{assets:function(){return m},contentTitle:function(){return p},default:function(){return c},frontMatter:function(){return o},metadata:function(){return s},toc:function(){return k}});var n=a(7462),i=a(3366),l=(a(7294),a(3905)),r=["components"],o={title:'CS4238 Computer Security Practice "Cheatsheet"'},p=void 0,s={unversionedId:"markdown/CS4238",id:"markdown/CS4238",title:'CS4238 Computer Security Practice "Cheatsheet"',description:"Week 1",source:"@site/docs/markdown/CS4238.md",sourceDirName:"markdown",slug:"/markdown/CS4238",permalink:"/My-Docs/docs/markdown/CS4238",draft:!1,editUrl:"https://github.com/crazoter/My-Docs/edit/main/docs/markdown/CS4238.md",tags:[],version:"current",frontMatter:{title:'CS4238 Computer Security Practice "Cheatsheet"'},sidebar:"someSidebar",previous:{title:"CS3244 Machine Learning",permalink:"/My-Docs/docs/markdown/CS3244"},next:{title:"CS4268 Quantum Computing",permalink:"/My-Docs/docs/markdown/CS4268"}},m={},k=[{value:"Week 1",id:"week-1",level:3},{value:"Unix",id:"unix",level:4},{value:"Week 2",id:"week-2",level:3},{value:"Week 3",id:"week-3",level:3},{value:"Week 4: Buffer Overflow",id:"week-4-buffer-overflow",level:3},{value:"Week 5 (Password attacks, Binary analysis, fuzzing)",id:"week-5-password-attacks-binary-analysis-fuzzing",level:3}],u={toc:k},d="wrapper";function c(e){var t=e.components,o=(0,i.Z)(e,r);return(0,l.kt)(d,(0,n.Z)({},u,o,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h3",{id:"week-1"},"Week 1"),(0,l.kt)("h4",{id:"unix"},(0,l.kt)("a",{parentName:"h4",href:"http://linuxcommand.org"},"Unix")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"/var/"),': "variable" files, usually contain logs e.g. ',(0,l.kt)("inlineCode",{parentName:"p"},"/var/log"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Analysing processes"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"ps")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"lsof")," (list of files (incl. devices & net sockets))",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"-p [pid]")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"-i"),": idk, prof just rambled"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"+d"),": for a particular dir"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"+D"),": for a dir, recursive"))))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Databases"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"User: ",(0,l.kt)("inlineCode",{parentName:"li"},"/etc/passwd"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"/etc/shadow"),", Group: ",(0,l.kt)("inlineCode",{parentName:"li"},"/etc/group")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("a",{parentName:"p",href:"http://www.filepermissions.com/file-permissions-index"},"File permissions")),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"  Displayed syntax:\n        owner's   owner's\n        usr       grp       all  \n  [-|d] rw[x|s|S] rw[x|s|S] rwx[t|T]\n        0-7       0-7       0-7\n\n  [-|d]:      [file | dir]\n  [x|s|S]:    [exe | SUID set | SUID set, but user triad cannot exe]\n  [x|s|S]:    [exe | SGID set | SGID set, but group triad cannot exe]\n  [t|T]:      [Sticky bit set | Sticky Bit set, but other triads cannot exe]\n\n  * SUID / SGID\n  SUID or SGID can be set to elevate permissions for execution. \n  A SETUID or SETGID binary is executed respectively whilst the command is executed on the document in question.\n  Usually an SUID or SGID is required where users need elevated privileges and do not have admin or root access.\n\n  * Sticky Bit ensures only the owner/root can edit & delete the file/dir.\n\n  * Chmod octal (4 groups of 3 bits):\n  [SUID 4][SGID 2][Sticky 1] rws rws rws\n")),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"setuid"),": change process' user ID to file owner"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"setgid"),": change process' user ID to group owner"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"find / -uid [uid] -perm [prefix][perm] -ls")),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"/"),": root dir"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://askubuntu.com/questions/532952/what-does-perm-4000-o-perm-2000"},"[prefix]"),": ",(0,l.kt)("inlineCode",{parentName:"li"},"None"),": Exact perms. ",(0,l.kt)("inlineCode",{parentName:"li"},"-"),": All specified perms are set. ",(0,l.kt)("inlineCode",{parentName:"li"},"/")," Any specified perms are set."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"[perm]"),": See File permissions above."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"-ls"),": list files found"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"man [section] cmd"),": but nowadays just google"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"[section]"),": ",(0,l.kt)("inlineCode",{parentName:"li"},"1"),": shell cmds ",(0,l.kt)("inlineCode",{parentName:"li"},"2"),": syscalls ",(0,l.kt)("inlineCode",{parentName:"li"},"3"),": lib calls ",(0,l.kt)("inlineCode",{parentName:"li"},"4"),": special files ",(0,l.kt)("inlineCode",{parentName:"li"},"5"),": file formats")))),(0,l.kt)("h3",{id:"week-2"},"Week 2"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Highlights for TCP:\n",(0,l.kt)("img",{src:a(4319).Z,width:"833",height:"237"}),'\n![](/img/tcpconnections.jpg" width="200" />'),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"ISN: Initial Sequence Num"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"UDP:\n",(0,l.kt)("img",{src:a(5900).Z,width:"837",height:"82"}))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Highlights of IP:\n",(0,l.kt)("img",{src:a(6202).Z,width:"817",height:"257"})),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Flags: Don't Fragment bit, More Fragment bit (more fragments incoming if set)",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"ID: Identifies the packet"),(0,l.kt)("li",{parentName:"ul"},"Fragment Offset: Fragment position during reassembly"),(0,l.kt)("li",{parentName:"ul"},"Src IP: spoofable"))),(0,l.kt)("li",{parentName:"ul"},"Local: 127.0.0.1, Private: 10.0.0.0/8, 172.16.0.0/12 (16.0.0-31.255.255), 192.168.0.0/16, Auto-IP: 169.254.1.0 - 169.254.254.255 (when DHCP unavailable)"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"ICMP: TCP/UDP layer"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Types: Echo Reply (0), Destination Unreachable (3), Redirect Message (5), Echo Request (8), Time Exceeded (11), Parameter Problem: Bad IP header (12)"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"NAT: Map Private to public IP")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Firewalls: Network/IP Layer (Traditional packet filters, stateful packet filters, proxy-based firewalls). Filters check headers only"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Usually block ICMP"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Network-based IDS: real-time detection, also check if packet payload matches application")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"MAC address: sometimes can tell infrastructure from MAC. Not reliable because can be spoofed")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"traceroute (Unix UDP), tracert (Win ICMP), tcptraceroute, tctrace")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Common Network Services: FTP (21), SSH (22), Telnet (23), HTTP (80), rlogin (513), rsh (rm shell 514), rcp, dns (53), nfs (2049), x windows (6000), ipp (ntwk printer 631)"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"SSH: ",(0,l.kt)("inlineCode",{parentName:"li"},"systemctl {start | enable | reload} ssh")),(0,l.kt)("li",{parentName:"ul"},"Apache: ",(0,l.kt)("inlineCode",{parentName:"li"},"systemctl start apache"),", a2enmod, a2dismod"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Manual network config:"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"ifdown <network-device>"),", Set network via ",(0,l.kt)("inlineCode",{parentName:"li"},"/etc/network/interfaces"),", then ",(0,l.kt)("inlineCode",{parentName:"li"},"ifup <network-device>")),(0,l.kt)("li",{parentName:"ul"},"Setup with DHCP: ",(0,l.kt)("inlineCode",{parentName:"li"},"auto lo \\n iface lo inet loopback \\n auto eth0 \\n iface eth0 inet dhcp")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"ifconfig"),": check, start, stop network interfaces",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"List: ",(0,l.kt)("inlineCode",{parentName:"li"},"ifconfig")," (up only) ",(0,l.kt)("inlineCode",{parentName:"li"},"ifconfig -a / ip addr show")," (all), ",(0,l.kt)("inlineCode",{parentName:"li"},"ifconfig eth0 / ip addr show eth0")," (a specific interface), ",(0,l.kt)("inlineCode",{parentName:"li"},"ip -4|-6 addr show")," (IPv4/IPv6 only)"),(0,l.kt)("li",{parentName:"ul"},"Start/Stop: ",(0,l.kt)("inlineCode",{parentName:"li"},"ifconfig eth0 {down | up}")," or ",(0,l.kt)("inlineCode",{parentName:"li"},"ip link set eth0 {down | up}")))),(0,l.kt)("li",{parentName:"ul"},"Troubleshoot: Verify gateway, DNS server can be ",(0,l.kt)("inlineCode",{parentName:"li"},"ping"),"ed, check domain name resolved with ",(0,l.kt)("inlineCode",{parentName:"li"},"nslookup")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"nc ip_addr port"),": see if server can be connected to via port"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"route -n")," = ",(0,l.kt)("inlineCode",{parentName:"li"},"ip route show")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"route add default gw <ip-addr>")," = ",(0,l.kt)("inlineCode",{parentName:"li"},"ip route add default via <ip-addr>")),(0,l.kt)("li",{parentName:"ul"},"DNS: ",(0,l.kt)("inlineCode",{parentName:"li"},"nslookup"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"dig"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"host"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"DNS records "),(0,l.kt)("li",{parentName:"ul"},"Zone transfer (usually disabled) ",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Replication of name server records from one DNS server (topo knowledge; spoof, poison etc)"),(0,l.kt)("li",{parentName:"ul"},"w/ nslookup: ",(0,l.kt)("inlineCode",{parentName:"li"},"nslookup ; server [target-name-server] ; set type=any ; ls -d [target-domain]")),(0,l.kt)("li",{parentName:"ul"},"w/ dig: ",(0,l.kt)("inlineCode",{parentName:"li"},"dig @[target-name-server] [target-domain] -t AXFR")))),(0,l.kt)("li",{parentName:"ul"},"Web-based DNS recon: ViewDNS.info, Central Ops, G Suite Toolbox's Dig"),(0,l.kt)("li",{parentName:"ul"},"Countermeasure: Allow zone transfer only between pri & sec name servers"),(0,l.kt)("li",{parentName:"ul"},"Develop split-horizon/split-view/split-brain DNS"))),(0,l.kt)("li",{parentName:"ul"},"Kali Linux tools",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"theHarvester (email addrs), Maltego, Netcraft, Centralops, Shodan (IoT), Kali NetHunter"))))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"VirtualBox"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://www.virtualbox.org/manual/ch06.html"},"Networking Modes"),(0,l.kt)("img",{src:a(4982).Z,width:"666",height:"485"})))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Compliance frameworks"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Kill chain: Recon, Weapon, Delivery, Exploit, Install, Control, Actions"),(0,l.kt)("li",{parentName:"ul"},"MITRE, PTES, OSSTM, OWASP, PCI DSS"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Recon: profile target"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Low-Tech: Dumpster diving, Social engineering, Spoofing, Spam, Phishing, Physical break-in"),(0,l.kt)("li",{parentName:"ul"},"Google Hacking",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"not (-), plus (+),"),(0,l.kt)("li",{parentName:"ul"},"Exact: ",(0,l.kt)("inlineCode",{parentName:"li"},'"exact search"'),", "),(0,l.kt)("li",{parentName:"ul"},"Number ranges: ",(0,l.kt)("inlineCode",{parentName:"li"},"1..10"),", "),(0,l.kt)("li",{parentName:"ul"},"info: ",(0,l.kt)("inlineCode",{parentName:"li"},"info:url"),", "),(0,l.kt)("li",{parentName:"ul"},"results under domain: ",(0,l.kt)("inlineCode",{parentName:"li"},"site:[domain]"),", "),(0,l.kt)("li",{parentName:"ul"},"sites that link to: ",(0,l.kt)("inlineCode",{parentName:"li"},"link:[page]"),","),(0,l.kt)("li",{parentName:"ul"},"word in title: ",(0,l.kt)("inlineCode",{parentName:"li"},"intitle[terms]")," (e.g. ",(0,l.kt)("inlineCode",{parentName:"li"},'site:xxx intitle="index of"'),"), "),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"related:[site]"),", "),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"cache[site]"),", "),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"filetype:suffix"),","),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"inurl:wp-login.php")," "),(0,l.kt)("li",{parentName:"ul"},"inurl examples: ",(0,l.kt)("inlineCode",{parentName:"li"},"inurl:<domain-suffix>/[administrator|admin][password|user|login]"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"inurl:view/index.[shtml|html]")," (cam), ",(0,l.kt)("inlineCode",{parentName:"li"},"inurl:viewer_index/index.[shtml|html]")," (cam)"),(0,l.kt)("li",{parentName:"ul"},'Google Hacking Database GHDB, Johnny Long\'s books "Google Hacking for Pen Testers"'),(0,l.kt)("li",{parentName:"ul"},"Google cache, archive wayback machine"),(0,l.kt)("li",{parentName:"ul"},"Metagoofil (metadata for public docs)"),(0,l.kt)("li",{parentName:"ul"},"whois: 23% correct name and physical addr, 29% fake info",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"validation obligation on reigstras"))),(0,l.kt)("li",{parentName:"ul"},"OSINT (open source intelligence; info from freely-accessible sources)"))),(0,l.kt)("li",{parentName:"ul"},"Attackers' knowledge:",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Phone #, Domain names, IP Addr, servers, tech contact info, people info"),(0,l.kt)("li",{parentName:"ul"},"After scan: IP addr, network topo, list of open ports on live hosts, list of services & versions, OS types of live hosts, ports open through firewalls")))))),(0,l.kt)("h3",{id:"week-3"},"Week 3"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},'War driving ("drive-by"): find wireless APs '),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Attacks: active scanning, passive sniffing, forcing deauthentication"),(0,l.kt)("li",{parentName:"ul"},"Defence: privacy in ESSID, wireless security protocols, VPN, detection"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"War dialing:"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Look for modems in target networks"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Network mapping: gain knowledge of target network topology"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"nmap ping (find live hosts using ICMP) ",(0,l.kt)("inlineCode",{parentName:"li"},"nmap -sP; | -sn")," (no port scan) in newer nmap. Can use Zenmap for GUI"),(0,l.kt)("li",{parentName:"ul"},"traceroute (exploit ttl & icmp TLE notif)"),(0,l.kt)("li",{parentName:"ul"},"Defences: ",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"block icmp with firewall (disable ping)"),(0,l.kt)("li",{parentName:"ul"},"filter ICMP TLE messages leaving network (hinder traceroute)"),(0,l.kt)("li",{parentName:"ul"},"Check open ports: ",(0,l.kt)("inlineCode",{parentName:"li"},'netstat -na | grep "LISTENING"')," / ",(0,l.kt)("inlineCode",{parentName:"li"},"lsof -i")," and closed unused ports"),(0,l.kt)("li",{parentName:"ul"},"keep sys patched (may not be easy to patch)"),(0,l.kt)("li",{parentName:"ul"},"scan sys/network periodically (find vuln before attackers do)",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"ensure it's safe to scan"),(0,l.kt)("li",{parentName:"ul"},"will DoS tests crash machines?"),(0,l.kt)("li",{parentName:"ul"},"will password tests lock out legit users?"))))),(0,l.kt)("li",{parentName:"ul"},"port scanning: find active services of server (65,536 possible TCP/UDP ports)",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Scan: ",(0,l.kt)("inlineCode",{parentName:"li"},"nmap [--help] [-A] [-sT|-sS|-sA|-sF|-sX|-sN] [-oN|-oX|-oS|-oG <file>] [--packet-trace] [-v|-vv] [--reason] [-sV] [-T<0-5>] [-b ftp_relay] [-sI zombie[:probeport]] ip_addr")," ",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"-A"),": Enable OS & version detection"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"-sT"),": Scan by Connection: Can be blocked by firewall, can be logged"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"-sS"),": SYN Scan. ",(0,l.kt)("a",{parentName:"li",href:"https://nmap.org/book/synscan.html"},"Svr Response"),":",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"(Do this because dir. connection can be logged)"),(0,l.kt)("li",{parentName:"ul"},"SYN/ACK = port open"),(0,l.kt)("li",{parentName:"ul"},"RST = port closed"),(0,l.kt)("li",{parentName:"ul"},"None w/ retransmit or ICMP unreachable = filtered"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"-sA"),": ACK scan (bypass firewall that blocks incoming connections, may use common source port numbers)"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"-sF"),": FIN scan, ",(0,l.kt)("inlineCode",{parentName:"li"},"-sX"),": Xmas tree (all flags set), ",(0,l.kt)("inlineCode",{parentName:"li"},"-sN"),": Null scan (no flags)"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"-oN|-oX|-oS|-oG <file>"),": Output as normal/XML/skript kiddie/grepable to filename"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"--packet-trace"),": show packets sent and received"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"-v"),": verbosity"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"--reason"),": show reason why port is in a particular state"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"-sV"),": Identify services using non-standard port numbers"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"-T<0-5>"),": 0 slowest, 5 fastest"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"-b ftp_relay"),": ",(0,l.kt)("strong",{parentName:"li"},"Bounce/file-relaying/FTP-forwarding")," feature on old FTP servers, allow you to port scan using FTP server as proxy. If FTP server has access to internal hosts, can bypass firewall. Change ",(0,l.kt)("inlineCode",{parentName:"li"},"ftp_relay")," with FTP server IP"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"-sI zombie[:probeport]"),": ",(0,l.kt)("strong",{parentName:"li"},"Idle scan"),": Target server non-responsive. If we can connect to a machine that is: 1. Able to talk to target 2. Is idle 3. Uses predictable (global) IP identification values (IP packet ID val), We can: 1. connect to zombie and get IP ID, 2. Ping target on port, spoofing our IP as the zombie. 3. Target talks to zombie and zombie replies, incrementing their IP ID. 4. Talk to zombie again and check if IP ID has jumped"))))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Vulnerability"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Weakness that can be exploited by an attacker to do unauthorized things "),(0,l.kt)("li",{parentName:"ul"},"Refer to CVE (maintained by MITRE)"),(0,l.kt)("li",{parentName:"ul"},"Exploit databases (older vulns for learning):",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"exploit database, rapid7, securityfocus"))),(0,l.kt)("li",{parentName:"ul"},"Zero-day: unknown exploit (Day-zero: vendor finds out)."),(0,l.kt)("li",{parentName:"ul"},"Lifecycle: Vuln found, Exploit in wild, Discovered (by vendor), public disclosure, anti-virus signatures released, patch released, patch deployed",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"zero-day + follow-on attacks between exploit released and patch deployed"))),(0,l.kt)("li",{parentName:"ul"},"Common Vulnerability Scoring System (CVSS) for assessing severity of vulns",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"3 metric groups: Base, temporal, environmental"),(0,l.kt)("li",{parentName:"ul"},"Base metric: 0 - 10"))),(0,l.kt)("li",{parentName:"ul"},"Vulnerability Scanning tools can be used for:",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"common config errors"),(0,l.kt)("li",{parentName:"ul"},"default config weaknesses"),(0,l.kt)("li",{parentName:"ul"},"well-known sys vulnerabilities"),(0,l.kt)("li",{parentName:"ul"},"Useful between vulnerability discovered - Patch deployment"),(0,l.kt)("li",{parentName:"ul"},"General structure: User config tool - Scanning engine + vuln. DB on targets - knowledge base of current scan - report generation based on results"),(0,l.kt)("li",{parentName:"ul"},"Free examples: Nessus / OpenVAS / Attack Tool Kit",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Plugins &pre-built policies can be installed from tenable"),(0,l.kt)("li",{parentName:"ul"},"Create Nessus policies based on policy templates (e.g. basic network scan), specify policy targets & scanning options, launch policy and check result"))),(0,l.kt)("li",{parentName:"ul"},"Antivirus vs vulnerability scanner",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Differences: Goal, scope of detection, monitoring agent, info examined (servers), reference data, output (computer infected / service affected)"))),(0,l.kt)("li",{parentName:"ul"},"Useful for pentesting and compliance checking"),(0,l.kt)("li",{parentName:"ul"},"Can vulnerability testing scan on Hackerdemia LiveCD (dl from hackingdojo) on another VM"))),(0,l.kt)("li",{parentName:"ul"},"Limitations",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Only check for known vulnerabilities (zero days not accounted for)"),(0,l.kt)("li",{parentName:"ul"},"Only check specified targets"),(0,l.kt)("li",{parentName:"ul"},'Only snapshot (Nessus "Live Results": offline vulnerability assessment with every plugin update)'))))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Metasploit: Acquired by Rapid7"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Exploitation engine/framework: Assembly line for producing exploits"),(0,l.kt)("li",{parentName:"ul"},"Best to refer to slides for image"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("img",{src:a(8345).Z,width:"925",height:"679"})),(0,l.kt)("li",{parentName:"ul"},"Bind Shell: Attach listener on exploited system and connect to port"),(0,l.kt)("li",{parentName:"ul"},"Reverse Shell: Make machine connect to attacking machine"),(0,l.kt)("li",{parentName:"ul"},"Procedure for injecting exploit payload:",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"show exploits")),(0,l.kt)("li",{parentName:"ul"},"use ",(0,l.kt)("inlineCode",{parentName:"li"},"exploit-name-which-u-copy")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"show targets")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"set target id")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"show payloads")),(0,l.kt)("li",{parentName:"ul"},"use ",(0,l.kt)("inlineCode",{parentName:"li"},"payload name-u-copy")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"show options")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"set rhost target-IP")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"set lhost local-IP")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"exploit")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"run cmds on opened shell")))),(0,l.kt)("li",{parentName:"ul"},"Generate an exe to send to the target (standalone payload)",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"List: ",(0,l.kt)("inlineCode",{parentName:"li"},"Msfvenom -l payloads")),(0,l.kt)("li",{parentName:"ul"},"Specify: ",(0,l.kt)("inlineCode",{parentName:"li"},"msfvenom -p payload")),(0,l.kt)("li",{parentName:"ul"},"Formats: ",(0,l.kt)("inlineCode",{parentName:"li"},"msfvenom --help-formats")))),(0,l.kt)("li",{parentName:"ul"},"Meterpreter: Metasploit attack payload that provides an interactive shell from which an attacker can explore the target machine and execute code."),(0,l.kt)("li",{parentName:"ul"},"Metasploit can:",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Shorten exploit development time with high quality"),(0,l.kt)("li",{parentName:"ul"},"Help validate reported vulnerabilities"),(0,l.kt)("li",{parentName:"ul"},"Pen-test systems"),(0,l.kt)("li",{parentName:"ul"},"Check security functionalities")))))),(0,l.kt)("h3",{id:"week-4-buffer-overflow"},"Week 4: Buffer Overflow"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Von Neumann: code treated as data (Code injection)")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Prefixes: e = 32bit, r = 64bit")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("em",{parentName:"p"},"ip: instruction ptr, "),"sp: stack ptr, *bp: base ptr")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Intel: Little Endian (LSB in lower addresses)"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Stack grows from larger to smaller addresses (downward)"),(0,l.kt)("li",{parentName:"ul"},"Heap grows from smaller to larger (upward)"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"64b memory: "),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Only least significant 48 bits used"),(0,l.kt)("li",{parentName:"ul"},"Rest of the bits copied from most significant used bit\n",(0,l.kt)("img",{src:a(1180).Z,width:"471",height:"512"})))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},".data/.bss: Initialized/uninitialized global var."))),(0,l.kt)("p",null,(0,l.kt)("img",{src:a(7350).Z,width:"691",height:"443"}),"\n",(0,l.kt)("img",{src:a(6247).Z,width:"1057",height:"476"})),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},'Stack Frame ("Activation Record")')),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Caller and callee (function prolog & epilog)\n",(0,l.kt)("img",{src:a(2925).Z,width:"862",height:"493"}))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"GDB"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"[b]reak <fx_name | filename:line# | *<memory address> >"),": breakpoint"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"disassemble fx_name"),": See memory addr of each instruction"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"[d]elete <breakpoint #>"),". See breakpt numbers w/ ",(0,l.kt)("inlineCode",{parentName:"li"},"info break")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"condition <breakpoint #> <condition>"),": Set condition for breakpoint to execute"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"[i]nfo <about>"),":",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"[f]rame"),": current stackframe"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"[s]tack"),": Stack backtrace. Same to ",(0,l.kt)("inlineCode",{parentName:"li"},"backtrace [full]")," | ",(0,l.kt)("inlineCode",{parentName:"li"},"where")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"[r]egisters"),": List every register. ",(0,l.kt)("inlineCode",{parentName:"li"},"[all-r]egisters")," lists more."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"[b]reak"),": breakpoints"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"[fu]nctions"),": lists all function signatures if ",(0,l.kt)("inlineCode",{parentName:"li"},"gcc -g")," was used"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"[r]un (args)"),": run w/ args"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"[c]ontinue"),": resume after breakpoint"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"[s]tep"),": Step 1 src code. ",(0,l.kt)("inlineCode",{parentName:"li"},"[s]tepi"),": Step 1 asm code"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"[n]ext"),": Step over 1 src code. ",(0,l.kt)("inlineCode",{parentName:"li"},"[n]exti"),": Step over 1 asm code"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"[k]ill"),": stop current session"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"[p]rint <var|reg|address|constant|c_expression>"),": print",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Accessing value in reg: Use $ prefix. ",(0,l.kt)("inlineCode",{parentName:"li"},"print *(char *)($esp + $eax + my_ptr_array[13])")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"[p]rint/x <c_expression>"),": print as hex"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"[x]/(num)(format)(unit_size) <address>"),": See data at address",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"num: # of contiguous blocks"),(0,l.kt)("li",{parentName:"ul"},"format: printf",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"i: instruction"),(0,l.kt)("li",{parentName:"ul"},"u|o|xX: unsigned decimal|unsigned octal|unsigned hexadecimal int"),(0,l.kt)("li",{parentName:"ul"},"fF|eE|gG|aA: decimal float|scientific|shortest rep|hex float"),(0,l.kt)("li",{parentName:"ul"},"c|s: char|string"),(0,l.kt)("li",{parentName:"ul"},"p| ptr addr"))),(0,l.kt)("li",{parentName:"ul"},"unit_size: ","[b]","ytes, ","[h]","alfwords (2B), ","[w]","ords, ","[g]","iant words. Default is bytes."),(0,l.kt)("li",{parentName:"ul"},"Return addr: ",(0,l.kt)("inlineCode",{parentName:"li"},"x/xw $ebp+4")," or ",(0,l.kt)("inlineCode",{parentName:"li"},"x/xw $rbp+8")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"list"),": Print lines from src. ",(0,l.kt)("inlineCode",{parentName:"li"},"set listsize n")," configures # of instr printed"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"set <type> <address> = <value>"),": modify memory"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"dprintf srcLine,printf_template,args"),": (simulate) insert printf at certain address on the fly",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Can be used to modify variables on the fly"))),(0,l.kt)("li",{parentName:"ul"},"Disable randomization: ",(0,l.kt)("inlineCode",{parentName:"li"},"sudo sysctl -w kernel.randomize_va_space=0")),(0,l.kt)("li",{parentName:"ul"},"Compile w/o optimization: ",(0,l.kt)("inlineCode",{parentName:"li"},"gcc sample.c -fno-stack-protector -g -O0 -o sample")),(0,l.kt)("li",{parentName:"ul"},"Show current instruction: ",(0,l.kt)("inlineCode",{parentName:"li"},"x/i $pc"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"* Show next n instructions: `x/ni $pc`\n* `set disassemble-next-line on`\n* `show disassemble-next-line`\n")),(0,l.kt)("img",{src:a(9418).Z,width:"845",height:"553"})))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"AT&T: Linux, GCC")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"NASM: Windows")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Memory Errors"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Spatial: Access Out-of-bound areas",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Buffer overflow / format string attacks"))),(0,l.kt)("li",{parentName:"ul"},"Temporal: Access undefined areas",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Dangling pointers / Integer overflow"))))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Buffer Overflow"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Include shell code in input "),(0,l.kt)("li",{parentName:"ul"},"Smash stack to modify return address to injected code"),(0,l.kt)("li",{parentName:"ul"},"Address to smash: ",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"$ebp - addr_of_buffer + 4 (+8 if 64b)"))),(0,l.kt)("li",{parentName:"ul"},"Defences:",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Safe coding / safe libraries"),(0,l.kt)("li",{parentName:"ul"},"Static Code checking (false positives / negative)"),(0,l.kt)("li",{parentName:"ul"},"Canary (check if canary modified to protect stack overflow)"),(0,l.kt)("li",{parentName:"ul"},"Randomization (not a guarantee)"),(0,l.kt)("li",{parentName:"ul"},"Non-executable stack (can bypass using libcalls and rop)")))))),(0,l.kt)("h3",{id:"week-5-password-attacks-binary-analysis-fuzzing"},"Week 5 (Password attacks, Binary analysis, fuzzing)"),(0,l.kt)("p",null,"Password Attacks (post-exploitation)"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Default passwords: ",(0,l.kt)("a",{parentName:"p",href:"http://www.phenoelit-us.org/dpl/dpl.html"},"http://www.phenoelit-us.org/dpl/dpl.html"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Password guessing using login (may result in acct lock)")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Unix passwords"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"/etc/passwd: Each entry is login name, x, uid, gid, home directory, shell (x means the hashed pass is in /etc/shadow; otherwise it is the hashed password)"),(0,l.kt)("li",{parentName:"ul"},"/etc/shadow: Each entry (delimited by :) is login name, hashed password, date of last password\nchange, minimum password age, maximum password\nage, password warning period, password inactivity\nperiod, account expiration date, reserved field"),(0,l.kt)("li",{parentName:"ul"},"hashed pass format: ",(0,l.kt)("inlineCode",{parentName:"li"},"$id$salt$hashed-key")," id:ID of the hash-method used (1=MD5, 5=SHA-256, 6= SHA-512, \u2026), salt: up to 16 chars drawn from the set ","[a-zA-Z0-9./]"," "))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Cracking passwords:"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Make a guess, encrypt the guess and compare hashed value w/ guess"),(0,l.kt)("li",{parentName:"ul"},"Dictionary | Brute force | Hybrid (if both dict & brute)"),(0,l.kt)("li",{parentName:"ul"},"John the Ripper (free password cracker). Stores cracked entries in ",(0,l.kt)("inlineCode",{parentName:"li"},".john/john.pot")),(0,l.kt)("li",{parentName:"ul"},"Usage:"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"unshadow /etc/passwd /etc/shadow > combined.txt"),": combine passwd with shadow"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"john [--users=<user>] [--wordlist=<file>] --show[=LEFT] [--single|--wordlist] combined.txt"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"--show"),": show cracked/uncracked passwords"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"--single"),": Single-crack mode. Derive passwords from login and user names, can mangle possible passwords to generate candidates"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"--wordlist"),": Ordering matters; put best candidate first. No sorting is done. Default is ",(0,l.kt)("inlineCode",{parentName:"li"},"/usr/share/john/password.lst")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"--incremental"),": Incremental. Tries all char combinations"))),(0,l.kt)("li",{parentName:"ul"},"Defences: use strong passwords, protect your hashed password files, do your own pentesting"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Vulnerability Discovery"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"White|Black Box"),(0,l.kt)("li",{parentName:"ul"},"Gray box: binary auditing through reverse engineering",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"See file type: ",(0,l.kt)("inlineCode",{parentName:"li"},"file <binary>")),(0,l.kt)("li",{parentName:"ul"},"See header: ",(0,l.kt)("inlineCode",{parentName:"li"},"xxd <bin> | head -n 20")," or ",(0,l.kt)("inlineCode",{parentName:"li"},"readelf -h <binary>")),(0,l.kt)("li",{parentName:"ul"},"List symbols: ",(0,l.kt)("inlineCode",{parentName:"li"},"readelf --syms <binary>")),(0,l.kt)("li",{parentName:"ul"},"List sections: ",(0,l.kt)("inlineCode",{parentName:"li"},"readelf --sections --wide <binary>")),(0,l.kt)("li",{parentName:"ul"},"List read-only data: ",(0,l.kt)("inlineCode",{parentName:"li"},"objdump -sj .rodata <binary>")),(0,l.kt)("li",{parentName:"ul"},"List printable strings: ",(0,l.kt)("inlineCode",{parentName:"li"},"strings <binary>")),(0,l.kt)("li",{parentName:"ul"},"List shared obj/lib: ",(0,l.kt)("inlineCode",{parentName:"li"},"ldd <binary>")),(0,l.kt)("li",{parentName:"ul"},"Disassemble exe: ",(0,l.kt)("inlineCode",{parentName:"li"},"objdump -d [-M intel] <binary>")))))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Syscalls: interface between process and OS (kernel)"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"strace"),": trace syscall (like ",(0,l.kt)("inlineCode",{parentName:"li"},"ptrace")," in GDB)"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"strace <command>"),": basic strace usage"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"strace -e <syscall> <command>"),": trace a syscall"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"strace -e trace=<syscall1,syscall2,\u2026> <command>"),": trace a set of syscalls"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"strace -o <output-file> <command>"),": output to a file"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"sudo strace -p <pid>"),": trace a running process"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"strace -t <command>"),": print timestamps"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"strace -f <command>"),": follow children processes too"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"strace -c <command>"),": print syscall statistics"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Lib functions: may/may not use syscalls (e.g. string manipulation)")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Trace using ",(0,l.kt)("inlineCode",{parentName:"p"},"ltrace")," (very similar to strace)"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"-C, --demangle"),": decode/demangle low-level symbol names into user-level names"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"-i"),": print the instruction pointer at the time of library call"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Fuzzing: black-box testing"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Mutation-based: mutate existing data to create test cases"),(0,l.kt)("li",{parentName:"ul"},"Or generation-based: create from scratch based on protocol/file format"),(0,l.kt)("li",{parentName:"ul"},"Steps:",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Identify target"),(0,l.kt)("li",{parentName:"ul"},"Identify input vectors"),(0,l.kt)("li",{parentName:"ul"},"Generate, execute & monitor exceptions"),(0,l.kt)("li",{parentName:"ul"},"Determine exploitability"))),(0,l.kt)("li",{parentName:"ul"},"Weaknesses:",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Fuzzer has no logic of target program"),(0,l.kt)("li",{parentName:"ul"},"Bad at discovering access-control flaws"),(0,l.kt)("li",{parentName:"ul"},"Cannot identify good/bad designs"),(0,l.kt)("li",{parentName:"ul"},"Cannot spot backdoors"),(0,l.kt)("li",{parentName:"ul"},"Cannot handle memory corruptions that don't cause exceptions"),(0,l.kt)("li",{parentName:"ul"},"Hard to automatically chain vulnerabilities"))))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"SPIKE (network protocol fuzzer) (not examinable in midterms)"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Provide support for common tedious tasks e.g. field length & checksum calculation"),(0,l.kt)("li",{parentName:"ul"},"API calls "),(0,l.kt)("li",{parentName:"ul"},"TCP request: ",(0,l.kt)("inlineCode",{parentName:"li"},"generic_send_tcp url port script_for_generatingdata.spk 0 0")),(0,l.kt)("li",{parentName:"ul"},"String insertion: ",(0,l.kt)("inlineCode",{parentName:"li"},"s_string(str)")," or ",(0,l.kt)("inlineCode",{parentName:"li"},"s_string_repeat(str, n)")),(0,l.kt)("li",{parentName:"ul"},"Binary insertion: ",(0,l.kt)("inlineCode",{parentName:"li"},"s_binary(\\\\x41)")," or ",(0,l.kt)("inlineCode",{parentName:"li"},"s_binary_repeat(bin, n)")),(0,l.kt)("li",{parentName:"ul"},"Blocks: for automating the calculating of field length in your packet/protocol",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Defining a block region: ",(0,l.kt)("inlineCode",{parentName:"li"},"s_block_start(blk_name)")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"s_block_end(blk_name)")),(0,l.kt)("li",{parentName:"ul"},"You can then have the script auto-calc the field length and replace it with this template: ",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"s_blocksize_string(blk_name, n)")," (use n-str to represent) or ",(0,l.kt)("inlineCode",{parentName:"li"},"s_block_size_byte(name)")," (use 1B to represent)"))))),(0,l.kt)("li",{parentName:"ul"},"Variables: ",(0,l.kt)("inlineCode",{parentName:"li"},"s_string_variable(var_name)")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Firewall"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Traditional Packet Filters (Rule-based, applied to header)"),(0,l.kt)("li",{parentName:"ul"},"Stateful Packet Filters (Maintain state table of all active connections, filter by connection state)"),(0,l.kt)("li",{parentName:"ul"},"Proxy-based: Acting as relay of application-level traffic"),(0,l.kt)("li",{parentName:"ul"},"Netfliter: packet-filtering framework",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Features:"),(0,l.kt)("li",{parentName:"ul"},"stateless & stateful packet filtering"),(0,l.kt)("li",{parentName:"ul"},"NAT & masquerading"),(0,l.kt)("li",{parentName:"ul"},"Mangling (packet manipulation)"),(0,l.kt)("li",{parentName:"ul"},"Hooks (filtering points)")))))),(0,l.kt)("p",null,(0,l.kt)("img",{src:a(94).Z,width:"413",height:"416"})),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Chains: PREROUTING, INPUT, FORWARD, POSTROUTING, OUTPUT\n",(0,l.kt)("img",{src:a(5743).Z,width:"671",height:"382"}))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Each chain contains rules sorted by table (type of op)")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Possible rule condition(s): IP addr, port, interface, connection state")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Possible rule action(s): "),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"terminating: ACCEPT, DROP, REJECT (drop & send err), change pkt info, "),(0,l.kt)("li",{parentName:"ul"},"non-terminating: LOG"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Firewall rules maintained by Netfilter framework & iptables"))),(0,l.kt)("p",null,(0,l.kt)("img",{src:a(9589).Z,width:"663",height:"398"})),(0,l.kt)("p",null,(0,l.kt)("img",{src:a(2570).Z,width:"673",height:"400"})),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"e.g. ",(0,l.kt)("inlineCode",{parentName:"li"},'iptables -t filter -A INPUT -p icmp --icmp-type echo-request -j LOG --log-prefix="ICMPIN-REQ:"')),(0,l.kt)("li",{parentName:"ul"},"iptables-extensions"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"state"),": allow for stateful filtering (INVALID,\nESTABLISHED, NEW, RELATED, UNTRACKED)",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"e.g. ",(0,l.kt)("inlineCode",{parentName:"li"},"iptables \u2013A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT")))),(0,l.kt)("li",{parentName:"ul"},"NAT: use ",(0,l.kt)("inlineCode",{parentName:"li"},"sudo iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE")),(0,l.kt)("li",{parentName:"ul"},"Firewall stuff"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"sudo iptables -L -v --line-numbers"),": check firewall rules (chains etc)"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"ip route show"),": show routing paths",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"10.1.40.0/24 via 10.255.115.1 dev eth1\n10.255.114.0/23 dev eth1  proto kernel  scope link  src 10.255.115.18\ndefault via 10.1.1.1 dev eth0  metric 100"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"proto kernel"),": Route was installed by the kernel during autoconfiguration"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"dev"),': "via" that port'),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"scope link"),": packet is sent straight to interface as the destination is in the subnet; no gateway needed"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"metric"),": priority (lower=better)"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"ip route get <ip_addr>"),": get related routing rule"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"cat /etc/resolv.conf"),": file for DNS")))}c.isMDXComponent=!0},7350:function(e,t,a){t.Z=a.p+"assets/images/32bitstackframe-e172402d4ea3f48e3bc904e6bcebd937.png"},6247:function(e,t,a){t.Z=a.p+"assets/images/64bitstackframe-673b5bfdaf5e73095a23599fbbfa4038.png"},9418:function(e,t,a){t.Z=a.p+"assets/images/attvnasm-c88c805717992c71621edcc85ccd48ee.jpg"},2925:function(e,t,a){t.Z=a.p+"assets/images/callcalee-a419a3d332a24f02872cf6fadcb26f94.jpg"},94:function(e,t,a){t.Z=a.p+"assets/images/firewallhooks-3b83a47e16f71a26f523a05d35e6bdcc.jpg"},5743:function(e,t,a){t.Z=a.p+"assets/images/firewallhookschart-37f514fb38466fadeeda1ebef51a6f84.jpg"},6202:function(e,t,a){t.Z=a.p+"assets/images/ippckt-e628155110f36882f28652e205245b9f.jpg"},2570:function(e,t,a){t.Z=a.p+"assets/images/iptablescond-19544dc6a297e6a1d2ab8e4dc46df2a4.jpg"},9589:function(e,t,a){t.Z=a.p+"assets/images/iptablesflag-6e9a25b8701bb8f240be9902672419aa.jpg"},1180:function(e,t,a){t.Z=a.p+"assets/images/memorylayout-90b7add19392a404a05d34711e894177.jpg"},8345:function(e,t,a){t.Z=a.p+"assets/images/metasploit-ff5fc9f3fd394d70b87f1c241e68c39c.png"},4319:function(e,t,a){t.Z=a.p+"assets/images/tcppckt-0696be3277eee4f147ef8a59bf85ae37.jpg"},5900:function(e,t,a){t.Z=a.p+"assets/images/udppckt-8885c3b720c6146a9c9c9086c635bedf.jpg"},4982:function(e,t,a){t.Z=a.p+"assets/images/vboxtree-92f681f7830f163ff1564da6d351e465.jpg"}}]);