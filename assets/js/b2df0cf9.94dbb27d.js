"use strict";(self.webpackChunkmy_docs=self.webpackChunkmy_docs||[]).push([[2724],{3905:function(a,e,t){t.d(e,{Zo:function(){return o},kt:function(){return u}});var n=t(7294);function m(a,e,t){return e in a?Object.defineProperty(a,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):a[e]=t,a}function s(a,e){var t=Object.keys(a);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(a);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(a,e).enumerable}))),t.push.apply(t,n)}return t}function r(a){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?s(Object(t),!0).forEach((function(e){m(a,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(a,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(e){Object.defineProperty(a,e,Object.getOwnPropertyDescriptor(t,e))}))}return a}function l(a,e){if(null==a)return{};var t,n,m=function(a,e){if(null==a)return{};var t,n,m={},s=Object.keys(a);for(n=0;n<s.length;n++)t=s[n],e.indexOf(t)>=0||(m[t]=a[t]);return m}(a,e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(a);for(n=0;n<s.length;n++)t=s[n],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(a,t)&&(m[t]=a[t])}return m}var i=n.createContext({}),p=function(a){var e=n.useContext(i),t=e;return a&&(t="function"==typeof a?a(e):r(r({},e),a)),t},o=function(a){var e=p(a.components);return n.createElement(i.Provider,{value:e},a.children)},N="mdxType",k={inlineCode:"code",wrapper:function(a){var e=a.children;return n.createElement(n.Fragment,{},e)}},c=n.forwardRef((function(a,e){var t=a.components,m=a.mdxType,s=a.originalType,i=a.parentName,o=l(a,["components","mdxType","originalType","parentName"]),N=p(t),c=m,u=N["".concat(i,".").concat(c)]||N[c]||k[c]||s;return t?n.createElement(u,r(r({ref:e},o),{},{components:t})):n.createElement(u,r({ref:e},o))}));function u(a,e){var t=arguments,m=e&&e.mdxType;if("string"==typeof a||m){var s=t.length,r=new Array(s);r[0]=c;var l={};for(var i in e)hasOwnProperty.call(e,i)&&(l[i]=e[i]);l.originalType=a,l[N]="string"==typeof a?a:m,r[1]=l;for(var p=2;p<s;p++)r[p]=t[p];return n.createElement.apply(null,r)}return n.createElement.apply(null,t)}c.displayName="MDXCreateElement"},2901:function(a,e,t){t.r(e),t.d(e,{assets:function(){return o},contentTitle:function(){return i},default:function(){return u},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return N}});var n=t(7462),m=t(3366),s=(t(7294),t(3905)),r=["components"],l={title:"CS2102 Databases (Closed book, 1pg cheatsheet)"},i=void 0,p={unversionedId:"markdown/CS2102",id:"markdown/CS2102",title:"CS2102 Databases (Closed book, 1pg cheatsheet)",description:"Database Management Systems (DBMS)",source:"@site/docs/markdown/CS2102.md",sourceDirName:"markdown",slug:"/markdown/CS2102",permalink:"/My-Docs/docs/markdown/CS2102",draft:!1,editUrl:"https://github.com/crazoter/My-Docs/edit/main/docs/markdown/CS2102.md",tags:[],version:"current",frontMatter:{title:"CS2102 Databases (Closed book, 1pg cheatsheet)"},sidebar:"someSidebar",previous:{title:"Problems",permalink:"/My-Docs/docs/markdown/problem_summaries"},next:{title:"Tech lookup",permalink:"/My-Docs/docs/"}},o={},N=[{value:"Database Management Systems (DBMS)",id:"database-management-systems-dbms",level:3}],k={toc:N},c="wrapper";function u(a){var e=a.components,l=(0,m.Z)(a,r);return(0,s.kt)(c,(0,n.Z)({},k,l,{components:e,mdxType:"MDXLayout"}),(0,s.kt)("h3",{id:"database-management-systems-dbms"},"Database Management Systems (DBMS)"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"Data Independence")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"Efficient Data access")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"Data integrity & security")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"Transaction Management")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"Query language")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"Database design")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"Database programming")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"Data model"),": used by DBMS, defined by user for querying the data")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"Schema"),": Description of the data model")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"Schema instance"),": Content of the DB at a specific time")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"Relational Model (RDBMS)"),": Microsoft SQL, SAP, MySQL, SQLite"),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"Data modeled using ",(0,s.kt)("strong",{parentName:"li"},"relations")," (i.e. tables)"),(0,s.kt)("li",{parentName:"ul"},"Each relation defined by ",(0,s.kt)("strong",{parentName:"li"},"relation schema"),", and a relation is a set of tuples",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"Relation schema: (attributes, data constraints, domain constraints)",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"e.g. (id: int, name: text, birthDate: date)"),(0,s.kt)("li",{parentName:"ul"},"Attribute: Column name",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"Must be a value in domain or null"))),(0,s.kt)("li",{parentName:"ul"},"Domain: datatype"),(0,s.kt)("li",{parentName:"ul"},"Data constraints: e.g. non null, unique etc",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"(Data) Integrity Constraint: Specified with schema, ensure relation instance is ",(0,s.kt)("em",{parentName:"li"},"legal"),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"Domain constraints (datatype)"),(0,s.kt)("li",{parentName:"ul"},"Key constraints",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"Non-null"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Superkey"),": combination of attributes(columns) that uniquely identifies each tuple"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Key"),": smallest combination of attributes that uniquely identifies each tuple"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Candidate Key"),": possible keys"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Primary key")," (PK): key chosen to uniquely ID each tuple"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Foreign key")," (FK): attribute (or set of attributes) that refer to the PK of another relation",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"Must either refer to a valid PK or be set to NULL"),(0,s.kt)("li",{parentName:"ul"},"FK constraints are known as ",(0,s.kt)("strong",{parentName:"li"},"referential integrity constraints")))))),(0,s.kt)("li",{parentName:"ul"},"Foreign key constraints (FK must exist if set)"),(0,s.kt)("li",{parentName:"ul"},"Other data constraints"))))))),(0,s.kt)("li",{parentName:"ul"},"Each row in a relation is a tuple/record has one component per attribute"),(0,s.kt)("li",{parentName:"ul"},"A ",(0,s.kt)("strong",{parentName:"li"},"relational database schema"),": collection of relation schemas + data constraints"),(0,s.kt)("li",{parentName:"ul"},"Relation (relation instance): A table populated with data"),(0,s.kt)("li",{parentName:"ul"},"Relational database (database instance): collection of tables"))))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"Object-relational model: Postgres")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"Relational Algebra: Internals of SQL"),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"Closure property: always outputs 1 table "),(0,s.kt)("li",{parentName:"ul"},"Operators:",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"Unary (1 input table)",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"Selection ",(0,s.kt)("span",{parentName:"li",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("msub",{parentName:"mrow"},(0,s.kt)("mi",{parentName:"msub"},"\u03c3"),(0,s.kt)("mrow",{parentName:"msub"},(0,s.kt)("mi",{parentName:"mrow"},"c"),(0,s.kt)("mi",{parentName:"mrow"},"o"),(0,s.kt)("mi",{parentName:"mrow"},"n"),(0,s.kt)("mi",{parentName:"mrow"},"d"),(0,s.kt)("mi",{parentName:"mrow"},"i"),(0,s.kt)("mi",{parentName:"mrow"},"t"),(0,s.kt)("mi",{parentName:"mrow"},"i"),(0,s.kt)("mi",{parentName:"mrow"},"o"),(0,s.kt)("mi",{parentName:"mrow"},"n")))),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\\sigma_{condition}")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.58056em",verticalAlign:"-0.15em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"\u03c3"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.33610799999999996em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-2.5500000000000003em",marginLeft:"-0.03588em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"c"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"o"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"n"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"d"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"i"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"t"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"i"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"o"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"n"))))),(0,s.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,s.kt)("span",{parentName:"span"}))))))))))," (select{c}(R)): Select rows that satisfy condition",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"condition is ur usual bool condition {(), =, <, ",(0,s.kt)("span",{parentName:"li",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mo",{parentName:"mrow"},"\u2264")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\\leq")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.7719400000000001em",verticalAlign:"-0.13597em"}}),(0,s.kt)("span",{parentName:"span",className:"mrel"},"\u2264"))))),", <",">",' (neq), op, not, and, or}. "null" can be used.'),(0,s.kt)("li",{parentName:"ul"},"anything + null = null. As a result, final result can be True, False, Unknown"))),(0,s.kt)("li",{parentName:"ul"},"Projection ",(0,s.kt)("span",{parentName:"li",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("msub",{parentName:"mrow"},(0,s.kt)("mi",{parentName:"msub"},"\u03c0"),(0,s.kt)("mrow",{parentName:"msub"},(0,s.kt)("mi",{parentName:"mrow"},"c"),(0,s.kt)("mi",{parentName:"mrow"},"o"),(0,s.kt)("mi",{parentName:"mrow"},"l"),(0,s.kt)("mi",{parentName:"mrow"},"u"),(0,s.kt)("mi",{parentName:"mrow"},"m"),(0,s.kt)("mi",{parentName:"mrow"},"n"),(0,s.kt)("mi",{parentName:"mrow"},"s"))),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,s.kt)("mi",{parentName:"mrow"},"T"),(0,s.kt)("mi",{parentName:"mrow"},"a"),(0,s.kt)("mi",{parentName:"mrow"},"b"),(0,s.kt)("mi",{parentName:"mrow"},"l"),(0,s.kt)("mi",{parentName:"mrow"},"e"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\\pi_{columns}(Table)")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"\u03c0"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.33610799999999996em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-2.5500000000000003em",marginLeft:"-0.03588em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"c"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"o"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal mtight",style:{marginRight:"0.01968em"}},"l"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"u"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"m"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"n"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"s"))))),(0,s.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,s.kt)("span",{parentName:"span"})))))),(0,s.kt)("span",{parentName:"span",className:"mopen"},"("),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.13889em"}},"T"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"a"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"b"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.01968em"}},"l"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"e"),(0,s.kt)("span",{parentName:"span",className:"mclose"},")")))))," (project{c}(R)): Select unique values from columns"),(0,s.kt)("li",{parentName:"ul"},"Renaming ",(0,s.kt)("span",{parentName:"li",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("msub",{parentName:"mrow"},(0,s.kt)("mi",{parentName:"msub"},"\u03c1"),(0,s.kt)("mrow",{parentName:"msub"},(0,s.kt)("mi",{parentName:"mrow"},"c"),(0,s.kt)("mi",{parentName:"mrow"},"o"),(0,s.kt)("mi",{parentName:"mrow"},"l"),(0,s.kt)("mo",{parentName:"mrow"},":"),(0,s.kt)("mi",{parentName:"mrow"},"n"),(0,s.kt)("mi",{parentName:"mrow"},"e"),(0,s.kt)("msub",{parentName:"mrow"},(0,s.kt)("mi",{parentName:"msub"},"w"),(0,s.kt)("mi",{parentName:"msub"},"n")),(0,s.kt)("mi",{parentName:"mrow"},"a"),(0,s.kt)("mi",{parentName:"mrow"},"m"),(0,s.kt)("mi",{parentName:"mrow"},"e"),(0,s.kt)("mo",{parentName:"mrow",separator:"true"},","),(0,s.kt)("mi",{parentName:"mrow",mathvariant:"normal"},"."),(0,s.kt)("mi",{parentName:"mrow",mathvariant:"normal"},"."),(0,s.kt)("mi",{parentName:"mrow",mathvariant:"normal"},"."))),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,s.kt)("mi",{parentName:"mrow"},"T"),(0,s.kt)("mi",{parentName:"mrow"},"a"),(0,s.kt)("mi",{parentName:"mrow"},"b"),(0,s.kt)("mi",{parentName:"mrow"},"l"),(0,s.kt)("mi",{parentName:"mrow"},"e"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\\rho_{col:new_name,...}(Table)")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1.036108em",verticalAlign:"-0.286108em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"\u03c1"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.3361079999999999em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-2.5500000000000003em",marginLeft:"0em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"c"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"o"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal mtight",style:{marginRight:"0.01968em"}},"l"),(0,s.kt)("span",{parentName:"span",className:"mrel mtight"},":"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"n"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"e"),(0,s.kt)("span",{parentName:"span",className:"mord mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal mtight",style:{marginRight:"0.02691em"}},"w"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.16454285714285719em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-2.357em",marginLeft:"-0.02691em",marginRight:"0.07142857142857144em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.5em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size3 size1 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"n")))),(0,s.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.143em"}},(0,s.kt)("span",{parentName:"span"})))))),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"a"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"m"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"e"),(0,s.kt)("span",{parentName:"span",className:"mpunct mtight"},","),(0,s.kt)("span",{parentName:"span",className:"mord mtight"},"."),(0,s.kt)("span",{parentName:"span",className:"mord mtight"},"."),(0,s.kt)("span",{parentName:"span",className:"mord mtight"},"."))))),(0,s.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.286108em"}},(0,s.kt)("span",{parentName:"span"})))))),(0,s.kt)("span",{parentName:"span",className:"mopen"},"("),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.13889em"}},"T"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"a"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"b"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.01968em"}},"l"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"e"),(0,s.kt)("span",{parentName:"span",className:"mclose"},")")))))," (rename{lbls}(R)): Rename columns (e.g. need multiple instances of same data)"))),(0,s.kt)("li",{parentName:"ul"},"Binary (2 ",(0,s.kt)("em",{parentName:"li"},"union-compatible")," input tables)",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"Union Compatible: Use schema of first table. Same # of columns, and columns have same domain order. Names don't have to be the same"),(0,s.kt)("li",{parentName:"ul"},"Union (U,R|S) (in R or S, rm dupes), Intersect (",(0,s.kt)("span",{parentName:"li",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mo",{parentName:"mrow"},"\u2229")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\\cap")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.55556em",verticalAlign:"0em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},"\u2229"))))),") (R & S), Set-difference (R-S) (in R but not S)"),(0,s.kt)("li",{parentName:"ul"},"Cross Product (RxS, R*S): concat the columns of both tables, generate all pairwise permutations of tuples from each table"))))),(0,s.kt)("li",{parentName:"ul"},"Methodologies:",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("ol",{parentName:"li"},(0,s.kt)("li",{parentName:"ol"},"Draw a tree"))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("ol",{parentName:"li",start:2},(0,s.kt)("li",{parentName:"ol"},"Sequence of steps (Each line stores the operation result as a new relation)"))))),(0,s.kt)("li",{parentName:"ul"},"Joins (combinations of operators):",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"Inner join (",(0,s.kt)("span",{parentName:"li",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mi",{parentName:"mrow"},"R"),(0,s.kt)("msub",{parentName:"mrow"},(0,s.kt)("mo",{parentName:"msub"},"\u22c8"),(0,s.kt)("mrow",{parentName:"msub"},(0,s.kt)("mi",{parentName:"mrow"},"c"),(0,s.kt)("mi",{parentName:"mrow"},"o"),(0,s.kt)("mi",{parentName:"mrow"},"n"),(0,s.kt)("mi",{parentName:"mrow"},"d"))),(0,s.kt)("mi",{parentName:"mrow"},"S"),(0,s.kt)("mo",{parentName:"mrow"},"="),(0,s.kt)("msub",{parentName:"mrow"},(0,s.kt)("mi",{parentName:"msub"},"\u03c3"),(0,s.kt)("mrow",{parentName:"msub"},(0,s.kt)("mi",{parentName:"mrow"},"c"),(0,s.kt)("mi",{parentName:"mrow"},"o"),(0,s.kt)("mi",{parentName:"mrow"},"n"),(0,s.kt)("mi",{parentName:"mrow"},"d"))),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,s.kt)("mi",{parentName:"mrow"},"R"),(0,s.kt)("mi",{parentName:"mrow"},"x"),(0,s.kt)("mi",{parentName:"mrow"},"S"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"R\\bowtie_{cond}S = \\sigma_{cond}(R x S)")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.83333em",verticalAlign:"-0.15em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.00773em"}},"R"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}}),(0,s.kt)("span",{parentName:"span",className:"mrel"},(0,s.kt)("span",{parentName:"span",className:"mrel"},"\u22c8"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.33610799999999996em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-2.5500000000000003em",marginLeft:"0em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"c"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"o"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"n"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"d"))))),(0,s.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,s.kt)("span",{parentName:"span"})))))),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.68333em",verticalAlign:"0em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.05764em"}},"S"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}}),(0,s.kt)("span",{parentName:"span",className:"mrel"},"="),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"\u03c3"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.33610799999999996em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-2.5500000000000003em",marginLeft:"-0.03588em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"c"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"o"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"n"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"d"))))),(0,s.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,s.kt)("span",{parentName:"span"})))))),(0,s.kt)("span",{parentName:"span",className:"mopen"},"("),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.00773em"}},"R"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"x"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.05764em"}},"S"),(0,s.kt)("span",{parentName:"span",className:"mclose"},")"))))),") (R~{c}S): Cross product, then select by condition"),(0,s.kt)("li",{parentName:"ul"},"Natural join (",(0,s.kt)("span",{parentName:"li",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mi",{parentName:"mrow"},"R"),(0,s.kt)("mo",{parentName:"mrow"},"\u22c8"),(0,s.kt)("mi",{parentName:"mrow"},"S")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"R\\bowtie S")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.68833em",verticalAlign:"-0.005em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.00773em"}},"R"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}}),(0,s.kt)("span",{parentName:"span",className:"mrel"},"\u22c8"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.68333em",verticalAlign:"0em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.05764em"}},"S"))))),") (R~S): Cross product, then drop duplicate columns from S",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"Inner join on all columns with same name, rm duplicate cols"))),(0,s.kt)("li",{parentName:"ul"},"Outer joins: inner join, but also include dangling tuples (rows that failed condition). For these tuples, since unjoined, will have unknown data; fill those cols with null",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"R ",(0,s.kt)("span",{parentName:"li",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("msub",{parentName:"mrow"},(0,s.kt)("mo",{parentName:"msub"},"\u2192"),(0,s.kt)("mrow",{parentName:"msub"},(0,s.kt)("mi",{parentName:"mrow"},"c"),(0,s.kt)("mi",{parentName:"mrow"},"o"),(0,s.kt)("mi",{parentName:"mrow"},"n"),(0,s.kt)("mi",{parentName:"mrow"},"d"))),(0,s.kt)("mi",{parentName:"mrow"},"S")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\\rightarrow_{cond} S")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.5168699999999999em",verticalAlign:"-0.15em"}}),(0,s.kt)("span",{parentName:"span",className:"mrel"},(0,s.kt)("span",{parentName:"span",className:"mrel"},"\u2192"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.33610799999999996em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-2.5500000000000003em",marginLeft:"0em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"c"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"o"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"n"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"d"))))),(0,s.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,s.kt)("span",{parentName:"span"})))))),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.68333em",verticalAlign:"0em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.05764em"}},"S")))))," (R~",">","{c}S): include dangling tuples from R"),(0,s.kt)("li",{parentName:"ul"},"R ",(0,s.kt)("span",{parentName:"li",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("msub",{parentName:"mrow"},(0,s.kt)("mo",{parentName:"msub"},"\u2190"),(0,s.kt)("mrow",{parentName:"msub"},(0,s.kt)("mi",{parentName:"mrow"},"c"),(0,s.kt)("mi",{parentName:"mrow"},"o"),(0,s.kt)("mi",{parentName:"mrow"},"n"),(0,s.kt)("mi",{parentName:"mrow"},"d"))),(0,s.kt)("mi",{parentName:"mrow"},"S")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\\leftarrow_{cond} S")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.5168699999999999em",verticalAlign:"-0.15em"}}),(0,s.kt)("span",{parentName:"span",className:"mrel"},(0,s.kt)("span",{parentName:"span",className:"mrel"},"\u2190"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.33610799999999996em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-2.5500000000000003em",marginLeft:"0em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"c"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"o"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"n"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"d"))))),(0,s.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,s.kt)("span",{parentName:"span"})))))),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.68333em",verticalAlign:"0em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.05764em"}},"S")))))," (R<~{c}S): include dangling tuples from S"),(0,s.kt)("li",{parentName:"ul"},"R ",(0,s.kt)("span",{parentName:"li",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mo",{parentName:"mrow"},"\u2190"),(0,s.kt)("msub",{parentName:"mrow"},(0,s.kt)("mo",{parentName:"msub"},"\u2192"),(0,s.kt)("mrow",{parentName:"msub"},(0,s.kt)("mi",{parentName:"mrow"},"c"),(0,s.kt)("mi",{parentName:"mrow"},"o"),(0,s.kt)("mi",{parentName:"mrow"},"n"),(0,s.kt)("mi",{parentName:"mrow"},"d"))),(0,s.kt)("mi",{parentName:"mrow"},"S")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\\leftarrow\\rightarrow_{cond} S")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.36687em",verticalAlign:"0em"}}),(0,s.kt)("span",{parentName:"span",className:"mrel"},"\u2190")),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.5168699999999999em",verticalAlign:"-0.15em"}}),(0,s.kt)("span",{parentName:"span",className:"mrel"},(0,s.kt)("span",{parentName:"span",className:"mrel"},"\u2192"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.33610799999999996em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-2.5500000000000003em",marginLeft:"0em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"c"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"o"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"n"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"d"))))),(0,s.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,s.kt)("span",{parentName:"span"})))))),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.68333em",verticalAlign:"0em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.05764em"}},"S")))))," (R<~",">","{c}S): include dangling tuples from R then S"),(0,s.kt)("li",{parentName:"ul"},"If condition not included, it's natural outer join"))))))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"SQL: Structured Query Language (declarative)"),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"domain-specific language (DSL)")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"Data Definition Language (schemas)"),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"Constraints",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"Not-null, Unique, PK, FK, General"),(0,s.kt)("li",{parentName:"ul"},"Column, Table, Assertions (not supposed for most DBMS, constraints enforced by triggers)"))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"CREATE TABLE table (col_name_by_newline, [constraints])"),";",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"column entry: ",(0,s.kt)("inlineCode",{parentName:"li"},"colName datatype [PRIMARY KEY] [UNIQUE] [NOT NULL] [DEFAULT value] [REFERENCES y (colInY)] [CHECK (condition)],"),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"Primary key: automatically unique & not null"))),(0,s.kt)("li",{parentName:"ul"},"constraint entries: ",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"General format: ",(0,s.kt)("inlineCode",{parentName:"li"},"[CONSTRAINT name] unique/composite/fk [DEFERRABLE INITIALLY DEFERRED|IMMEDIATE ]")),(0,s.kt)("li",{parentName:"ul"},"Unique: ",(0,s.kt)("inlineCode",{parentName:"li"},"UNIQUE (col1, col2)")),(0,s.kt)("li",{parentName:"ul"},"Composite: ",(0,s.kt)("inlineCode",{parentName:"li"},"PRIMARY KEY (col1, col2, ...)")),(0,s.kt)("li",{parentName:"ul"},"Foreign Key: ",(0,s.kt)("inlineCode",{parentName:"li"},"FOREIGN KEY (colInX [, ...]) references y (colInY [, ...]) [MATCH FULL] [ON DELETE refAction] [ON UPDATE refAction]"),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"If FK is composite, partial nulls are allowed unless ",(0,s.kt)("inlineCode",{parentName:"li"},"MATCH FULL")," is specified. "))),(0,s.kt)("li",{parentName:"ul"},"Condition: ",(0,s.kt)("inlineCode",{parentName:"li"},"CHECK (column constraints e.g. 'day in (1,2,3))'")),(0,s.kt)("li",{parentName:"ul"},"Named constraint: add ",(0,s.kt)("inlineCode",{parentName:"li"},"CONSTRAINT name")," in front of the constraint"),(0,s.kt)("li",{parentName:"ul"},"refAction (for when new FK is invalid / is in use): ",(0,s.kt)("inlineCode",{parentName:"li"},"RESTRICT")," (reject operation, not deferred) | CASCADE (changes from parent propagates) | SET NULL (set any FK references to null) | NO ACTION (same as restrict, deferrable) | SET DEFAULT (set any FK references to default value specified in schema)`"),(0,s.kt)("li",{parentName:"ul"},"Deferred checking: only for ",(0,s.kt)("inlineCode",{parentName:"li"},"UNIQUE | PK | FK"),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"INITIALLY DEFERRED"),": Checks will only be conducted at end of transaction."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"INITIALLY IMMEDIATE"),": Checks enforced per query, but you can call ",(0,s.kt)("inlineCode",{parentName:"li"},"SET CONSTRAINTS constraintName DEFERRED")," to defer it"))))))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"DROP TABLE [IF EXISTS] x [CASCADE]"),";",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"CASCADE"),": Drop objects that have foreign keys linked to table"))),(0,s.kt)("li",{parentName:"ul"},"Schema Modification",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"ALTER TABLE table ALTER COLUMN columnName [DROP addOn (e.g. DEFAULT)]")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"ALTER TABLE table DROP COLUMN columnName")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"ALTER TABLE table ADD COLUMN (column entry)")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"ALTER TABLE table ADD CONSTRAINT (constraint entry)")))))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"Data Manipulation Lanuage (queries)"),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("inlineCode",{parentName:"p"},"INSERT INTO table [(col1, col2...)] VALUES tuple1, tuple2...")," * Subqueries can be used to automate stuff: ",(0,s.kt)("inlineCode",{parentName:"p"},"insert into Enrolls (sid, cid) select studentId, 101 from Students where year = 1;"))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("inlineCode",{parentName:"p"},"DELETE FROM table [WHERE condition]"))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("inlineCode",{parentName:"p"},"UPDATE table SET col = col + i [WHERE condition]"))))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("inlineCode",{parentName:"p"},"SELECT [distinct] {columns | *} FROM tableSelector [WHERE condition] [{UNION | INTERSECT | EXCEPT} [ALL] subquery] [ORDER BY orderby] [OFFSET trimTop] [LIMIT maxTuplesReturned]")),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"columns"),": ",(0,s.kt)("inlineCode",{parentName:"li"},"col1 [as newName], ..."),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"Operations between columns along the same tuple is allowed: e.g. ",(0,s.kt)("inlineCode",{parentName:"li"},"price * qty as cost")))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"tableSelector"),": ",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"Option 1: N tables e.g. ",(0,s.kt)("inlineCode",{parentName:"li"},"table1 as x, table2 as y")),(0,s.kt)("li",{parentName:"ul"},"Option 2: JOIN, default is inner e.g. ",(0,s.kt)("inlineCode",{parentName:"li"},"table1 X [NATURAL] [LEFT | RIGHT] [INNER | OUTER] JOIN table2 Y ON {condition e.g. (X.name < Y.name) and (X.attr = Y.attr)}"),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"Temporary tables can be created by wrapping the join with brackets e.g. ",(0,s.kt)("inlineCode",{parentName:"li"},"SELECT C.cname, S.pizza FROM Customers C left join (Restaurants R join Sells S on R.rname = S.rname) on C.area = R.area;")))))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"UNION, INTERSECT, EXCEPT"),": removes duplicates unless the ",(0,s.kt)("inlineCode",{parentName:"li"},"ALL")," keyword is included (e.g. when you want to count the # of occurences)",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"UNION = A U B, Intersect = A n B, Except = A - B"))),(0,s.kt)("li",{parentName:"ul"},"Subqueries:",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"[NOT] EXISTS (SELECT ...)"),": Subquery is a condition by itself; return T if subquery is not empty"),(0,s.kt)("li",{parentName:"ul"},"The returned subquery must have the same # of columns as the operands in the condition"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"(col1,..) IN (SELECT ...)"),": T if value can be found in subq"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"(col1,..) comparator ANY (SELECT ...)"),": T if comparison is T for any in subq",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"Comparator: ",(0,s.kt)("inlineCode",{parentName:"li"},"=  >  <  >=  <=  <>  !=")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"SOME")," is an alias for ",(0,s.kt)("inlineCode",{parentName:"li"},"ANY")))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"(col1,..) comparator ALL (SELECT ...)"),": T if comparison is T for all in subq"))),(0,s.kt)("li",{parentName:"ul"},"Orderby: ",(0,s.kt)("inlineCode",{parentName:"li"},"col1 asc|desc, col2 asc|desc")," or ",(0,s.kt)("inlineCode",{parentName:"li"},"col1,col2 desc"),". Default asc."))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"Transactions"),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"Wrap a series of queries using ",(0,s.kt)("inlineCode",{parentName:"li"},"BEGIN;")," and ",(0,s.kt)("inlineCode",{parentName:"li"},"COMMIT;")),(0,s.kt)("li",{parentName:"ul"},"Enforces ",(0,s.kt)("strong",{parentName:"li"},"ACID"),":",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"Atomicity: results of queries all shown or not"),(0,s.kt)("li",{parentName:"ul"},"Consistency: Change in data will always abide all rules (constraints, cascades, triggers etc)"),(0,s.kt)("li",{parentName:"ul"},'Isolation: Can be considered to be "serializable"; not affected by other reads & writes'),(0,s.kt)("li",{parentName:"ul"},"Durability: Committed transaction will work even if system fails"))),(0,s.kt)("li",{parentName:"ul"},"Deferrable constraints: defer checks to the end of transaction"))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"Datatypes"),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"boolean"),", ",(0,s.kt)("inlineCode",{parentName:"li"},"smallint"),", ",(0,s.kt)("inlineCode",{parentName:"li"},"integer"),", ",(0,s.kt)("inlineCode",{parentName:"li"},"float8"),", ",(0,s.kt)("inlineCode",{parentName:"li"},"numeric"),", ",(0,s.kt)("inlineCode",{parentName:"li"},"numeric(max_n, decimal)"),", ",(0,s.kt)("inlineCode",{parentName:"li"},"char(fixed_n)"),", ",(0,s.kt)("inlineCode",{parentName:"li"},"varchar(n)"),", ",(0,s.kt)("inlineCode",{parentName:"li"},"text"),", ",(0,s.kt)("inlineCode",{parentName:"li"},"date"),", ",(0,s.kt)("inlineCode",{parentName:"li"},"timestamp")))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"NULL"),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"Same as relational: comparison & arithmetic with null = unknown result"))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"Operations"),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"x IS NULL, x IS DISTINCT FROM y")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"||"),": concat"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"round()")))))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"Entity-Relationship (ER) Model"),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"Diagram to show entities & relationships schema as diagram "),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Entity Set")," (Table for Entity data): Rectangle w/ name",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"Entity: entry in table"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Weak Entity Set"),": Double boxed rectangle w/ name",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Uses Partial Key:")," Can only be identified by combining a attr with PK from ",(0,s.kt)("strong",{parentName:"li"},"owner entity")," through a relationship"),(0,s.kt)("li",{parentName:"ul"},"Attached relationship is double diamonded, and the relationship doesn't exist in the schema as a table (it's just drawn for syntax)"),(0,s.kt)("li",{parentName:"ul"},"Must have total participation (double line)"),(0,s.kt)("li",{parentName:"ul"},"Weak Entity must have Many-to-One relationship to owner ",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"Cannot have many to many since it needs unique owner entity"),(0,s.kt)("li",{parentName:"ul"},"Cannot one-to-one since otherwise just merge into 1 table"))),(0,s.kt)("li",{parentName:"ul"},"Existence dependent on owner entry"))))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Attribute"),": Oval w/ name, attached to 1 table with 1 full line",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"Primary Key / Composite key: All Underlined"))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Relationship set")," (Table for relationship data): Diamond w/ name.",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"Many-to-many relationship"),(0,s.kt)("li",{parentName:"ul"},"Relationship set: immediate neighborhood of relationship "),(0,s.kt)("li",{parentName:"ul"},"Relationship role: necessary if an entity has multiple edges to the same relationship."),(0,s.kt)("li",{parentName:"ul"},"Connected to 2 entities (rects): binary relationship set. 3 entities = ternary relationship set."),(0,s.kt)("li",{parentName:"ul"},"Primary key of this table includes primary keys of entities it is connected to (exceptions based on constraints)",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"These attributes are foreign keys; implied and omitted from diagram"),(0,s.kt)("li",{parentName:"ul"},"Relationships can also have additional attributes, and some of it can be part of its PK."))))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Relationship role"),": label over the line. Added to FK attribute as prefix."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Relationship constraints"),": denoted by type of line between ",(0,s.kt)("strong",{parentName:"li"},"Entity Set E1 to Relationship Set R to E2"),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"E to R represents its relationship with the other entity (e.g. E can only have 1 E2)"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Default"),": E1 has (?, 0..N) relationship w/ E2"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Key Constraint: E1 has (?, *..1) relationship w/ E2"),": Arrow from E1 to R",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"If R has any E that is 1 to N, it only needs E's PK as its PK. ",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"PKs from both entities will still be imported as FK, though."),(0,s.kt)("li",{parentName:"ul"},"If many Es with 1 to N, can choose any E"))))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Total Participation Constraint: E1 has (?, 1..*) relationship w/ E2"),": Double line E1 to R",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"If just normal line, it's called partial participation constraint."))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"E1 has (?, 1) relationship w/ E2"),": Combine both (double line + arrowhead), exactly 1"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Line with boxhead from R1 to R2 (Aggregation)"),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"When you want to link an entity to a relationship (i.e. entity only cares about the other 2 entities if they are in love)"),(0,s.kt)("li",{parentName:"ul"},"Foreign key of R1 is R2's PK (combined with PKs from other directly linked entities)"))))),(0,s.kt)("li",{parentName:"ul"},'"Interfaces": The ISA ("is-a") pyramid',(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"Subclasses attached to bottom of pyramid with single line only"),(0,s.kt)("li",{parentName:"ul"},"Linked to a entity set (",(0,s.kt)("strong",{parentName:"li"},"superclass"),") by ",(0,s.kt)("em",{parentName:"li"},"line")," to top of the ISA pyramid. This ",(0,s.kt)("em",{parentName:"li"},"line")," has significance:"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Single Line (Overlap: T, Covering: F)"),": E belongs to (0..N) subclasses"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Arrow head (Overlap: F, Covering: F)"),": E belongs to (0..1) subclasses"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Double Line (Overlap: T, Covering: T)"),": E belongs to (1..N) subclasses"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Dbl Line + Arrow (Overlap: F, Covering: T)"),": E belongs to (1..1) subclass"),(0,s.kt)("li",{parentName:"ul"},"Subclasses are another table with their own attributes and use superclass' PK as FK",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"With added constraint ",(0,s.kt)("inlineCode",{parentName:"li"},"on delete cascade")," (deletion in superclass propagated to subclass) to the FKs"))))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Diagram to Schema"),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"Option 1: Follow "),(0,s.kt)("li",{parentName:"ul"},"Option 2: Merge Relationship table w/ entity table on the 1-side if it's a 1 to M relationship"))),(0,s.kt)("li",{parentName:"ul"},"Guidelines",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"Capture as many application's constraints as possible without imposing unnecessary ones"))))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"Aggregate Functions ",(0,s.kt)("inlineCode",{parentName:"p"},"fx(attribute|*|expression)")),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"...WHERE j = (SELECT max(x) FROM y)")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"max(price * qty)")," is also possible"),(0,s.kt)("li",{parentName:"ul"},"Return null if table is empty / attrs are null: ",(0,s.kt)("inlineCode",{parentName:"li"},"min(), max(), avg(), sum()")),(0,s.kt)("li",{parentName:"ul"},"Return 0 if table is empty / attrs are null: ",(0,s.kt)("inlineCode",{parentName:"li"},"count(attr)")),(0,s.kt)("li",{parentName:"ul"},"Returns # of entries even if all null: ",(0,s.kt)("inlineCode",{parentName:"li"},"count(*)")),(0,s.kt)("li",{parentName:"ul"},"Need to be used in a subquery "),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"GROUP BY")," columns (order of columns don't matter)",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("img",{src:t(9363).Z,width:"411",height:"192"})),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"ORDER BY")," can include aggregate functions after ",(0,s.kt)("inlineCode",{parentName:"li"},"GROUP BY")),(0,s.kt)("li",{parentName:"ul"},"After using ",(0,s.kt)("inlineCode",{parentName:"li"},"GROUP BY")," you can only ",(0,s.kt)("inlineCode",{parentName:"li"},"SELECT"),":",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"columns grouped by"),(0,s.kt)("li",{parentName:"ul"},"aggregate data"),(0,s.kt)("li",{parentName:"ul"},"CANNOT select columns that were not included in group, unless the column grouped by is the PK (thus every tuple is unique)"))),(0,s.kt)("li",{parentName:"ul"},"The same column conditions above apply to ",(0,s.kt)("inlineCode",{parentName:"li"},"HAVING")," (aggregate condition)"))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"WHERE B4 GROUP BY"),": Only entries selected by ",(0,s.kt)("inlineCode",{parentName:"li"},"WHERE")," will be aggregated by ",(0,s.kt)("inlineCode",{parentName:"li"},"GROUP BY")," and subsequently trimmed again by ",(0,s.kt)("inlineCode",{parentName:"li"},"HAVING"),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("img",{src:t(5388).Z,width:"330",height:"238"})))))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"Common Table Expressions"),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"WITH alias1 AS (SELECT QUERY), alias2 AS (..), ..."),". ",(0,s.kt)("inlineCode",{parentName:"li"},"alias")," can then be used in subsequent queries e.g. ",(0,s.kt)("inlineCode",{parentName:"li"},"SELECT * FROM alias")," "))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"Views"),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"CREATE VIEW alias AS (SELECT QUERY)"),". Creates a ",(0,s.kt)("strong",{parentName:"li"},"permanent")," virtual table that can only be removed by dropping it"),(0,s.kt)("li",{parentName:"ul"},"When ",(0,s.kt)("inlineCode",{parentName:"li"},"CREATE table")," is called, that creates a ",(0,s.kt)("strong",{parentName:"li"},"logical schema")," (which is supported by a ",(0,s.kt)("strong",{parentName:"li"},"physical schema")," that actually implements each table). This segregation is logical/physical data independence (application won't be affected by implementation changes)"),(0,s.kt)("li",{parentName:"ul"},"Views are an ",(0,s.kt)("strong",{parentName:"li"},"external schema")," against the logical schema."))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"Advanced SELECT"),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"CASE"),": SQL's switch statement; convert column to category",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"e.g. ",(0,s.kt)("inlineCode",{parentName:"li"},"SELECT CASE WHEN x > 2 THEN 'A'; WHEN x > 1 THEN 'B'; ELSE 'C' END AS colAlias FROM y")))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"COALESCE(col1,col2,col3...)"),": Return first non-null value in the list of cols provided, otherwise returns NULL"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"NULLIF"),": Replace value with null in col when selecting ",(0,s.kt)("inlineCode",{parentName:"li"},"SELECT NULLIF(col, 'val') FROM y")))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"Pattern Matching with ",(0,s.kt)("inlineCode",{parentName:"p"},"LIKE"),":"),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"_"),": character wildcard"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"%"),":  wildcard for 0..N characters"),(0,s.kt)("li",{parentName:"ul"})))))}u.isMDXComponent=!0},5388:function(a,e,t){e.Z=t.p+"assets/images/db-order-7de8d40eb4e41ddac68e07531cafcca0.png"},9363:function(a,e,t){e.Z=t.p+"assets/images/groupby-a1da0995ab5ee3cfa4779c4a7cef0d74.png"}}]);