(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{78:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return i})),a.d(t,"metadata",(function(){return b})),a.d(t,"rightToc",(function(){return o})),a.d(t,"default",(function(){return p}));var n=a(2),l=a(6),r=(a(0),a(90)),i={title:"Network"},b={unversionedId:"markdown/network",id:"markdown/network",isDocsHomePage:!1,title:"Network",description:"Inter-domain Routing",source:"@site/docs/markdown/network.md",slug:"/markdown/network",permalink:"/My-Docs/docs/markdown/network",editUrl:"https://github.com/crazoter/My-Docs/edit/master/website/docs/markdown/network.md",version:"current",sidebar:"someSidebar",previous:{title:"Math",permalink:"/My-Docs/docs/markdown/math"},next:{title:"Formal Verification",permalink:"/My-Docs/docs/markdown/formal_verification"}},o=[],c={rightToc:o};function p(e){var t=e.components,a=Object(l.a)(e,["components"]);return Object(r.b)("wrapper",Object(n.a)({},c,a,{components:t,mdxType:"MDXLayout"}),Object(r.b)("details",null,Object(r.b)("summary",null,"Inter-domain Routing"),Object(r.b)("p",null,"* Wk9-05-BGP * 2 types of routing algos",Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Comparison"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Link State algo"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Distance Vector algo"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Router knowledge"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"All know full network topology & link cost info"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Only know connected neighbors & link costs")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Algo type"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Global / Centralized e.g. Djikstra"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Decentralized, iteratively by exchanging info with neighbours")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Algo impl"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Open Shortest Path First (OSPF)"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Routing Info Prtcl (RIP)")))),Object(r.b)("p",null,"Limitations : Link State Routing"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"High bandwidth: ",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Topology info is flooded (to other routers)"))),Object(r.b)("li",{parentName:"ul"},"Sensitive info released by nodes"),Object(r.b)("li",{parentName:"ul"},"High processing overhead: Everything computed locally by node"),Object(r.b)("li",{parentName:"ul"},"Unit representing distance is not the same for all nodes")),Object(r.b)("p",null,"Distance Vector:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Send distance metric per destination "),Object(r.b)("li",{parentName:"ul"},"Adv",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Hide details of topology"),Object(r.b)("li",{parentName:"ul"},"Only next hop determined per node"))),Object(r.b)("li",{parentName:"ul"},"Disadv",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Inconsistent units representing distance"),Object(r.b)("li",{parentName:"ul"},"Slow convergence due to counting-to-infinity",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Counting to infinity: (14:00) A - B - C, if link BC is cut, B will still think A can reach C and increment path cost, A will still think B can reach and increment path cost etc")))))),Object(r.b)("p",null,"Path Vector"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Extension of distance vector",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Send entire path for each destination d "),Object(r.b)("li",{parentName:"ul"},"Adv:",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Avoid count-to-infinity problem"),Object(r.b)("li",{parentName:"ul"},"Avoid loops"))),Object(r.b)("li",{parentName:"ul"},"In terms of ASes, only 3 hops needed (flattening of the internet as they seek to shorten the path for customers)")))),Object(r.b)("p",null,"Border Gateway Protocol (BGP)"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Main goals:",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Fulfil agreements with other ISPs",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Define who provide transit for what (based on relationship)",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Customer-provider",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Customer pays provider for internet routing",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"multi-homing: if multiple providers to same customer"))),Object(r.b)("li",{parentName:"ul"},"Provider provides transit service to customer"),Object(r.b)("li",{parentName:"ul"},"Customers:",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Nontransit AS: Provider never flows traffic through customer",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"May not even need BGP if they don't intend to help route traffic; just need to know provider's static IP"))),Object(r.b)("li",{parentName:"ul"},"Selective Transit: Allows some AS to flow traffic through, others deny"))))),Object(r.b)("li",{parentName:"ul"},"Peer to peer",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"2 ASes agree to transit between their customers"),Object(r.b)("li",{parentName:"ul"},"Usually don't pay each other"),Object(r.b)("li",{parentName:"ul"},"Agreement only between the 2 ASes; relationship is not transitive"),Object(r.b)("li",{parentName:"ul"},"Usually confidential"),Object(r.b)("li",{parentName:"ul"},"Usually between 2 big ASes"),Object(r.b)("li",{parentName:"ul"},"Traffic Exchange Ratio should be roughly balanced"),Object(r.b)("li",{parentName:"ul"},"Pros:",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Reduce costs"),Object(r.b)("li",{parentName:"ul"},"Improve end-to-end performance"),Object(r.b)("li",{parentName:"ul"},"May be the only way"))),Object(r.b)("li",{parentName:"ul"},"Cons:",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"No profit"),Object(r.b)("li",{parentName:"ul"},"Peers are competition"),Object(r.b)("li",{parentName:"ul"},"Peering requires periodic renegotiation"))))))))),Object(r.b)("li",{parentName:"ul"},"Minimize costs"),Object(r.b)("li",{parentName:"ul"},"Ensure good performance for customers"))),Object(r.b)("li",{parentName:"ul"},"Tiers:",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Tier 1 AS / ISP",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Top of the customer-provider hierarchy, only have peers (no upstream)",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Don't have to pay anyone"))),Object(r.b)("li",{parentName:"ul"},"P2P with each other to form a full-mesh",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Around 10-12 ASes (AT&T etc)"))),Object(r.b)("li",{parentName:"ul"},"Lower layer",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"National / regional scope"))),Object(r.b)("li",{parentName:"ul"},"Stub ASes",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"usually customers"))),Object(r.b)("li",{parentName:"ul"},"List at CAIDA AS RANK"))))),Object(r.b)("li",{parentName:"ul"},"2 BGP routers (between ASes) exchange messages",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"advertise paths to different destination network prefixes"))),Object(r.b)("li",{parentName:"ul"},"Application layer, TCP port 179",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"exchange all active routes in their routing tables"),Object(r.b)("li",{parentName:"ul"},"exchange incremental updates"))),Object(r.b)("li",{parentName:"ul"},"BGP/IGP model used by ISPs (S15)",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"eBGP: Between ASes: exchange reachability info",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Border routers are directly connected by TCP (no IGP)"),Object(r.b)("li",{parentName:"ul"},"ASes advertise their network prefix"),Object(r.b)("li",{parentName:"ul"},"No expiration timer for routes"),Object(r.b)("li",{parentName:"ul"},"All routes through peer become invalid if it goes down"),Object(r.b)("li",{parentName:"ul"},"Message Info:",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Types: OPEN (TCP to peer), UPDATE (advertise/withdraw new/old paths), KEEPALIVE (Keep TCP open), NOTIFICATION (correct errors or FIN) (S18-19)"),Object(r.b)("li",{parentName:"ul"},"Attributes",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Well-Known mandatory:",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"AS-PATH: All ASes in the path (e.g. AS1 AS24)"),Object(r.b)("li",{parentName:"ul"},'NEXT-HOP: IP addr of the first router in the next very next AS "next-hop-AS"'))))),Object(r.b)("li",{parentName:"ul"},"Prefix (IP prefix (network mask e.g. 138.16.64/22) of the AS)"),Object(r.b)("li",{parentName:"ul"},"Route: Contains Prefix + attribute"))),Object(r.b)("li",{parentName:"ul"},"BGP Routing & Updating the routing table (hot potato routing)",Object(r.b)("ol",{parentName:"li"},Object(r.b)("li",{parentName:"ol"},"Init: Router learns of prefix from BGP route adverts from iBGPs"),Object(r.b)("li",{parentName:"ol"},"eBGP level: Use shortest AS-PATH"),Object(r.b)("li",{parentName:"ol"},"iBGP level: Find shortest path using OSPF to NEXT-HOP based on chosen AS-PATH"),Object(r.b)("li",{parentName:"ol"},"Updating the forwarding table: Identify port along OSPF shortest path, Add prefix-port entry to forwarding table (e.g. 138.16.64/22, port 4)"))))),Object(r.b)("li",{parentName:"ul"},"iBGP: BGP inside the AS: ",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"propagrate reachability info so that other border routers will know (and can exchange)"),Object(r.b)("li",{parentName:"ul"},"Don't have to be directly connected (can use IGP)"),Object(r.b)("li",{parentName:"ul"},"But they must be (logically) fully meshed",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Each pass on prefixes they learn from outside AS"),Object(r.b)("li",{parentName:"ul"},"Do not pass on prefixes learnt from other iBGP speakers",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Info not repeated, reduce overhead, scalable"))))))),Object(r.b)("li",{parentName:"ul"},"Interior Gateway Protocol (IGP): The normal network routing")))))),Object(r.b)("details",null,Object(r.b)("summary",null,"Template"),Object(r.b)("p",null)))}p.isMDXComponent=!0}}]);