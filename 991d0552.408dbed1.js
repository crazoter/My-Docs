(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{76:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return b})),a.d(t,"metadata",(function(){return r})),a.d(t,"rightToc",(function(){return c})),a.d(t,"default",(function(){return p}));var l=a(2),n=a(6),i=(a(0),a(90)),b={title:"Python Cheatsheet"},r={unversionedId:"markdown/python",id:"markdown/python",isDocsHomePage:!1,title:"Python Cheatsheet",description:"Legend:",source:"@site/docs/markdown/python.md",slug:"/markdown/python",permalink:"/My-Docs/docs/markdown/python",editUrl:"https://github.com/crazoter/My-Docs/edit/master/website/docs/markdown/python.md",version:"current",sidebar:"someSidebar",previous:{title:"Machine Learning",permalink:"/My-Docs/docs/markdown/machine_learning"},next:{title:"Math",permalink:"/My-Docs/docs/markdown/math"}},c=[{value:"Pure Python",id:"pure-python",children:[]},{value:"Libraries / Modules",id:"libraries--modules",children:[{value:"Recordlinkage",id:"recordlinkage",children:[]}]},{value:"Pandas",id:"pandas",children:[]}],m={rightToc:c};function p(e){var t=e.components,a=Object(n.a)(e,["components"]);return Object(i.b)("wrapper",Object(l.a)({},m,a,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Legend:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"#: Number, used for differentiating variables"),Object(i.b)("li",{parentName:"ul"},"L#: List."),Object(i.b)("li",{parentName:"ul"},"D#: Dictionary. "),Object(i.b)("li",{parentName:"ul"},"itr#: Iterable."),Object(i.b)("li",{parentName:"ul"},"DF#: Dataframe"),Object(i.b)("li",{parentName:"ul"},"mltIdx#: MultiIndex"),Object(i.b)("li",{parentName:"ul"},"idx: Index"),Object(i.b)("li",{parentName:"ul"},"int#: Integer variable")),Object(i.b)("h2",{id:"pure-python"},"Pure Python"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Iterables",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"Loop with Index"),": for idx, val in enumerate(itr)"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"Generators (lazy loading iteration)"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Creation: ",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"gen = iter(L / D / *range(i)*)")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"gen = (x for x in list)")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"gen = def fx(param): ... for x in param: yield x ...")))),Object(i.b)("li",{parentName:"ul"},"Use:    val = next(itr)"))))),Object(i.b)("li",{parentName:"ul"},"Lists",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"Init with List Comprehension"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Format: ",Object(i.b)("inlineCode",{parentName:"li"},"[ (value) for (var_name) in (iterable) if (predicate) ]"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"e.g. [L","[0]"," for elem in list]"))))),Object(i.b)("li",{parentName:"ul"},"List of tuples:",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"Convert L to L of indexed tuples:"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"enumerate(itr, start=int1) = [(int1,itr[0]), (int1+1,itr[0])...]")))),Object(i.b)("li",{parentName:"ul"},"Merge two lists into a list of tuples:",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"zip(*L1*,*L2*)"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"returns zipObject: [ (L1","[0]",",L2","[0]","),  (L1","[1]",",L2","[1]",")... ]"),Object(i.b)("li",{parentName:"ul"},"Access zipObject contents: (*zipObj)"))),Object(i.b)("li",{parentName:"ul"},"Unzip: ",Object(i.b)("inlineCode",{parentName:"li"},"zip(*zipObj)")))))))),Object(i.b)("li",{parentName:"ul"},"Dictionaries",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"Init with Dictionary Comprehension"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Format: ",Object(i.b)("inlineCode",{parentName:"li"},"{ (key : value) for (var_name) in (iterable) if (predicate) }"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"e.g. {x : len(x) for x in list}"))))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"Init from list of tuples"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"dict(zip(L1,L2))")))))),Object(i.b)("li",{parentName:"ul"},"Functions:",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Default params: x=default"),Object(i.b)("li",{parentName:"ul"},"Flexible list param: ",Object(i.b)("inlineCode",{parentName:"li"},"f(*args)"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Usage: f(v1,v2,v3...)"))),Object(i.b)("li",{parentName:"ul"},"Flexible dict param: ",Object(i.b)("inlineCode",{parentName:"li"},"f(**kwargs)"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Usage: f(k1=v1,k2=v2,k3=v3...)"))),Object(i.b)("li",{parentName:"ul"},"Multiple output: ",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"def fx(): return (x, y)"),Object(i.b)("li",{parentName:"ul"},"Multiple assignment:",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"x,y = fx()"))))),Object(i.b)("li",{parentName:"ul"},"Global variables: ",Object(i.b)("inlineCode",{parentName:"li"},"global varname")),Object(i.b)("li",{parentName:"ul"},"Nested functions:",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Variables & params of external f() is accessible"),Object(i.b)("li",{parentName:"ul"},"The function itself can be returned"),Object(i.b)("li",{parentName:"ul"},"Modify variables from nested f(): ",Object(i.b)("inlineCode",{parentName:"li"},"nonlocal varname")))))),Object(i.b)("li",{parentName:"ul"},"Functional Programming",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"map((lambda a: (transformation)), L)")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"filter((lambda a: (predicate)), L)")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"reduce((lambda a,b: ...), L) = result"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Import: ",Object(i.b)("inlineCode",{parentName:"li"},"from functools import reduce")))),Object(i.b)("li",{parentName:"ul"},"The lambda can be replaced with a concrete function"))),Object(i.b)("li",{parentName:"ul"},"Lambdas",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"(lambda (params): (body))")),Object(i.b)("li",{parentName:"ul"},"e.g. (lambda a: a+1) \u2261 def f(a): return a+1"),Object(i.b)("li",{parentName:"ul"},'No "return"'),Object(i.b)("li",{parentName:"ul"},"No multi-line"))),Object(i.b)("li",{parentName:"ul"},"Exception Handling",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"try: ... "),Object(i.b)("li",{parentName:"ul"},"except: ... "),Object(i.b)("li",{parentName:"ul"},"raise ",Object(i.b)("em",{parentName:"li"},"Error"),"(",Object(i.b)("em",{parentName:"li"},"msg"),")",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Error = {ValueError, TypeError, YourOwnErrClass}"))))),Object(i.b)("li",{parentName:"ul"},"I/O",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Open file:",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"with open('filepath') as file_var"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"file_var.readline()"),": returns None if empty"))))),Object(i.b)("li",{parentName:"ul"},"Get script directory:",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"dir_path = os.path.dirname(os.path.realpath(__file__))")))),Object(i.b)("li",{parentName:"ul"},"Get path to file relative to script directory:",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"local_file = os.path.join(dir_path, 'path', 'to', 'local_file')")))))),Object(i.b)("li",{parentName:"ul"},"Datetime",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Req: ",Object(i.b)("inlineCode",{parentName:"li"},"import datetime as dt")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"dt.date.today()"))))),Object(i.b)("h2",{id:"libraries--modules"},"Libraries / Modules"),Object(i.b)("h3",{id:"recordlinkage"},"Recordlinkage"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"import recordlinkage")),Object(i.b)("li",{parentName:"ul"},"Purpose: ",Object(i.b)("strong",{parentName:"li"},"Join different datasets when they don't share a unique identifier.")," See ",Object(i.b)("a",Object(l.a)({parentName:"li"},{href:"https://recordlinkage.readthedocs.io/en/latest/ref-index.html"}),"Documentation"),Object(i.b)("ol",{parentName:"li"},Object(i.b)("li",{parentName:"ol"},Object(i.b)("strong",{parentName:"li"},"Init an indexer"))),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"idxr = recordlinkage.Index()"))),Object(i.b)("ol",Object(l.a)({parentName:"li"},{start:2}),Object(i.b)("li",{parentName:"ol"},"Blocking: only ",Object(i.b)("strong",{parentName:"li"},"choose pairs of entries that have the same value under specified column"),' (e.g. "cuisine_type")')),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},'idxr.block("col_name")'))),Object(i.b)("ol",Object(l.a)({parentName:"li"},{start:3}),Object(i.b)("li",{parentName:"ol"},Object(i.b)("strong",{parentName:"li"},"Generate said pairs of indexes")," which agree on the equal columns")),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"mltIdx_pairs = idxr.index(df1, df2)"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Example pair: MultiIndex(","[(0,0),(0,1),(0,7),(1,0),(1,4)...]",")")))),Object(i.b)("ol",Object(l.a)({parentName:"li"},{start:4}),Object(i.b)("li",{parentName:"ol"},Object(i.b)("strong",{parentName:"li"},"Specify the columns to compare")," with a Compare object")),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"comp = recordlinkage.Compare()"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Then, specify the columns to compare by:",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"comp.exact('col_nm_in_df1', 'col_nm_in_df2', label='new_lbl_in_new_df')"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Entries must ",Object(i.b)("strong",{parentName:"li"},"exact match")," in the columns"),Object(i.b)("li",{parentName:"ul"},"e.g. comp.exact('city', 'city', label='city')"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"comp.string('col_nm_in_df1', 'col_nm_in_df2', label='new_lbl_in_new_df', threshold = dbl_frm_0-1)")," (threshold usually 0.8)"),Object(i.b)("li",{parentName:"ul"},"Entries must be ",Object(i.b)("strong",{parentName:"li"},"similar")," (in terms of string) in the columns")))))),Object(i.b)("ol",Object(l.a)({parentName:"li"},{start:5}),Object(i.b)("li",{parentName:"ol"},"Apply the Compare object to ",Object(i.b)("strong",{parentName:"li"},"get a dataframe highlighting potential matches"))),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"df_pttl_mtchs = comp.compute(mltIdx_pairs, df1, df2)"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Structure of df_pttl_mtchs:",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Index / Col 0: mltIdx_pairs"),Object(i.b)("li",{parentName:"ul"},"Columns: columns used for comparison",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"exact: 1 if equal else 0"),Object(i.b)("li",{parentName:"ul"},"string: 1 if threshold met, else 0")))))))),Object(i.b)("ol",Object(l.a)({parentName:"li"},{start:6}),Object(i.b)("li",{parentName:"ol"},Object(i.b)("strong",{parentName:"li"},"Filter matches")," from potential matches")),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"df_mtchs = df_pttl_mtchs[df_pttl_mtchs.sum(axis=1) >= 3]"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"If the val == 1 then there's a match on that column. This counts the number of matched columns, and filters by that."),Object(i.b)("li",{parentName:"ul"},"In this case there were 3 columns so 3 was chosen")))),Object(i.b)("ol",Object(l.a)({parentName:"li"},{start:7}),Object(i.b)("li",{parentName:"ol"},Object(i.b)("strong",{parentName:"li"},"Select matched indexes")," for one of the DFs (in this case df2)",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"idx_df2_mtched = df_mtchs.index.get_level_values(1)"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"df_pttl_mtchs & df_mtchs use a MultiIndex. "),Object(i.b)("li",{parentName:"ul"},"df_mtchs.index.get_level_values(0) = df1's indexes, (1) = df2's indexes"))))),Object(i.b)("li",{parentName:"ol"},Object(i.b)("strong",{parentName:"li"},"From df2, remove entries that match df1's entries"))),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"df2_notInDf1 = df2[~df2.index.isin(idx_df2_mtched)]"))),Object(i.b)("ol",Object(l.a)({parentName:"li"},{start:9}),Object(i.b)("li",{parentName:"ol"},Object(i.b)("strong",{parentName:"li"},"Join df1 and the new df2 entries"))),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"df1.append(df2_notInDf1)"))))),Object(i.b)("h2",{id:"pandas"},"Pandas"),Object(i.b)("details",null,Object(i.b)("summary",null,"Click to expand!"),"## Heading 1. A numbered 2. list * With some * Sub bullets"))}p.isMDXComponent=!0}}]);